
scatter.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000010c4  80002020  80002020  00002420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80003200  80003200  00003600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80003400  80003400  00003800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000108  80003418  80003418  00003818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  8 .ctors        00000008  00000008  80003520  00003c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dtors        00000008  00000010  80003528  00003c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .jcr          00000004  00000018  80003530  00003c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .got          00000000  0000001c  80003534  00003c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000504  0000001c  80003534  00003c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .balign       00000000  00000520  80003a38  00004120  2**0
                  ALLOC
 14 .bss          000000e8  00000520  00000520  00000000  2**2
                  ALLOC
 15 .heap         000069f8  00000608  00000608  00000000  2**0
                  ALLOC
 16 .comment      00000028  00000000  00000000  00004120  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 000007b8  00000000  00000000  00004148  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 000012b7  00000000  00000000  00004900  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   0000fb08  00000000  00000000  00005bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00002a83  00000000  00000000  000156bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00006db6  00000000  00000000  00018142  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  000012dc  00000000  00000000  0001eef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0000301d  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    00003029  00000000  00000000  000231f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macinfo 005e28ea  00000000  00000000  0002621a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 27 .debug_ranges 00000b18  00000000  00000000  00608b04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

80002004 <_init>:
80002004:	eb cd 40 40 	pushm	r6,lr
80002008:	48 26       	lddpc	r6,80002010 <_init+0xc>
8000200a:	1e 26       	rsub	r6,pc
8000200c:	c0 48       	rjmp	80002014 <_init+0x10>
8000200e:	d7 03       	nop
80002010:	80 00       	ld.sh	r0,r0[0x0]
80002012:	1f ee       	ld.ub	lr,pc[0x6]
80002014:	c5 2c       	rcall	800020b8 <frame_dummy>
80002016:	e0 a0 08 5d 	rcall	800030d0 <__do_global_ctors_aux>
8000201a:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002020 <_stext>:
80002020:	30 07       	mov	r7,0
80002022:	e0 6a 80 00 	mov	r10,32768
80002026:	5b fa       	cp.w	r10,-1
80002028:	f4 0d 17 10 	movne	sp,r10
8000202c:	fe cb eb 0c 	sub	r11,pc,-5364
80002030:	30 8c       	mov	r12,8
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 70       	breq	80002042 <_stext+0x22>
80002036:	e0 6a 05 20 	mov	r10,1312
8000203a:	b7 09       	ld.d	r8,r11++
8000203c:	b9 28       	st.d	r12++,r8
8000203e:	14 3c       	cp.w	r12,r10
80002040:	cf d5       	brlt	8000203a <_stext+0x1a>
80002042:	e0 6a 06 08 	mov	r10,1544
80002046:	e0 6c 05 20 	mov	r12,1312
8000204a:	30 08       	mov	r8,0
8000204c:	30 09       	mov	r9,0
8000204e:	b9 28       	st.d	r12++,r8
80002050:	14 3c       	cp.w	r12,r10
80002052:	cf e5       	brlt	8000204e <_stext+0x2e>
80002054:	e0 a0 04 21 	rcall	80002896 <_init_startup>
80002058:	fe cc ec 58 	sub	r12,pc,-5032
8000205c:	e0 a0 04 00 	rcall	8000285c <atexit>
80002060:	cd 2f       	rcall	80002004 <_init>
80002062:	1a 9c       	mov	r12,sp
80002064:	30 0b       	mov	r11,0
80002066:	e0 a0 04 19 	rcall	80002898 <_init_argv>
8000206a:	5b fc       	cp.w	r12,-1
8000206c:	f9 bc 00 00 	moveq	r12,0
80002070:	f9 ba 00 00 	moveq	r10,0
80002074:	14 1d       	sub	sp,r10
80002076:	c2 dc       	rcall	800020d0 <main>
80002078:	e0 a0 03 fa 	rcall	8000286c <exit>

8000207c <__do_global_dtors_aux>:
8000207c:	d4 21       	pushm	r4-r7,lr
8000207e:	e0 68 05 20 	mov	r8,1312
80002082:	11 89       	ld.ub	r9,r8[0x0]
80002084:	30 08       	mov	r8,0
80002086:	f0 09 18 00 	cp.b	r9,r8
8000208a:	c1 61       	brne	800020b6 <__do_global_dtors_aux+0x3a>
8000208c:	31 08       	mov	r8,16
8000208e:	31 46       	mov	r6,20
80002090:	10 95       	mov	r5,r8
80002092:	10 16       	sub	r6,r8
80002094:	e0 67 05 24 	mov	r7,1316
80002098:	a3 46       	asr	r6,0x2
8000209a:	20 16       	sub	r6,1
8000209c:	c0 68       	rjmp	800020a8 <__do_global_dtors_aux+0x2c>
8000209e:	2f f8       	sub	r8,-1
800020a0:	8f 08       	st.w	r7[0x0],r8
800020a2:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020a6:	5d 18       	icall	r8
800020a8:	6e 08       	ld.w	r8,r7[0x0]
800020aa:	0c 38       	cp.w	r8,r6
800020ac:	cf 93       	brcs	8000209e <__do_global_dtors_aux+0x22>
800020ae:	30 19       	mov	r9,1
800020b0:	e0 68 05 20 	mov	r8,1312
800020b4:	b0 89       	st.b	r8[0x0],r9
800020b6:	d8 22       	popm	r4-r7,pc

800020b8 <frame_dummy>:
800020b8:	d4 01       	pushm	lr
800020ba:	31 8c       	mov	r12,24
800020bc:	78 08       	ld.w	r8,r12[0x0]
800020be:	58 08       	cp.w	r8,0
800020c0:	c0 50       	breq	800020ca <frame_dummy+0x12>
800020c2:	48 38       	lddpc	r8,800020cc <frame_dummy+0x14>
800020c4:	58 08       	cp.w	r8,0
800020c6:	c0 20       	breq	800020ca <frame_dummy+0x12>
800020c8:	5d 18       	icall	r8
800020ca:	d8 02       	popm	pc
800020cc:	00 00       	add	r0,r0
	...

800020d0 <main>:
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// main

int main(void)
{
800020d0:	d4 31       	pushm	r0-r7,lr
800020d2:	fa cd 00 b8 	sub	sp,sp,184
	signed short adc_value_temp  = -1;
	signed short adc_value_light = -1;

	sysclk_init();
800020d6:	e0 a0 02 67 	rcall	800025a4 <sysclk_init>

	gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) /
800020da:	30 2b       	mov	r11,2
800020dc:	fe cc ec c4 	sub	r12,pc,-4924
800020e0:	c6 cd       	rcall	800023b8 <gpio_enable_module>
			sizeof(ADC_GPIO_MAP[0]));

		AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
800020e2:	fe 77 3c 00 	mov	r7,-50176
800020e6:	6e 18       	ld.w	r8,r7[0x4]
800020e8:	a9 a8       	sbr	r8,0x8
	adc_configure(&AVR32_ADC);
800020ea:	0e 9c       	mov	r12,r7
	sysclk_init();

	gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) /
			sizeof(ADC_GPIO_MAP[0]));

		AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
800020ec:	8f 18       	st.w	r7[0x4],r8
	adc_configure(&AVR32_ADC);
800020ee:	c2 1d       	rcall	80002330 <adc_configure>
800020f0:	0e 9c       	mov	r12,r7

	/* Enable the ADC channels. */
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_TEMPERATURE_CHANNEL);
800020f2:	30 0b       	mov	r11,0
800020f4:	c2 ad       	rcall	80002348 <adc_enable>
800020f6:	0e 9c       	mov	r12,r7
800020f8:	30 1b       	mov	r11,1
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_LIGHT_CHANNEL);
800020fa:	c2 7d       	rcall	80002348 <adc_enable>
800020fc:	c8 4d       	rcall	80002404 <INTC_init_interrupts>
800020fe:	d5 03       	csrf	0x10
80002100:	30 09       	mov	r9,0

	irq_initialize_vectors();
80002102:	30 08       	mov	r8,0
80002104:	fa c6 ff 78 	sub	r6,sp,-136
		{
			.diva = AVR32_PWM_DIVA_CLK_OFF,
			.divb = AVR32_PWM_DIVB_CLK_OFF,
			.prea = AVR32_PWM_PREA_MCK,
			.preb = AVR32_PWM_PREB_MCK
		};
80002108:	fa e9 00 b0 	st.d	sp[176],r8

	/* PWM channel configuration structure. */
	avr32_pwm_channel_t pc1 = { .ccnt = 0 };
8000210c:	fa e9 00 a8 	st.d	sp[168],r8
		{
			.diva = AVR32_PWM_DIVA_CLK_OFF,
			.divb = AVR32_PWM_DIVB_CLK_OFF,
			.prea = AVR32_PWM_PREA_MCK,
			.preb = AVR32_PWM_PREB_MCK
		};
80002110:	32 0a       	mov	r10,32
80002112:	30 0b       	mov	r11,0
80002114:	0c 9c       	mov	r12,r6
80002116:	e0 a0 03 b9 	rcall	80002888 <memset>

	/* PWM channel configuration structure. */
	avr32_pwm_channel_t pc1 = { .ccnt = 0 };
8000211a:	fa c5 ff 98 	sub	r5,sp,-104
8000211e:	32 0a       	mov	r10,32
80002120:	30 0b       	mov	r11,0
	avr32_pwm_channel_t pc2 = { .ccnt = 0 };
80002122:	0a 9c       	mov	r12,r5
80002124:	e0 a0 03 b2 	rcall	80002888 <memset>
80002128:	fa c4 ff b8 	sub	r4,sp,-72
8000212c:	32 0a       	mov	r10,32
8000212e:	30 0b       	mov	r11,0
	avr32_pwm_channel_t pc3 = { .ccnt = 0 };
80002130:	08 9c       	mov	r12,r4
80002132:	e0 a0 03 ab 	rcall	80002888 <memset>
80002136:	32 0a       	mov	r10,32
80002138:	30 0b       	mov	r11,0
8000213a:	fa cc ff d8 	sub	r12,sp,-40
	avr32_pwm_channel_t pc4 = { .ccnt = 0 };
8000213e:	e0 a0 03 a5 	rcall	80002888 <memset>
80002142:	32 0a       	mov	r10,32
80002144:	fa c2 ff f8 	sub	r2,sp,-8
80002148:	30 0b       	mov	r11,0
	avr32_pwm_channel_t pc5 = { .ccnt = 0 };
8000214a:	04 9c       	mov	r12,r2
8000214c:	e0 a0 03 9e 	rcall	80002888 <memset>
80002150:	30 58       	mov	r8,5
80002152:	50 38       	stdsp	sp[0xc],r8
80002154:	52 38       	stdsp	sp[0x8c],r8
80002156:	51 b8       	stdsp	sp[0x6c],r8
	
	pc1.cdty = 5; /* Channel duty cycle, should be < CPRD. */
80002158:	51 38       	stdsp	sp[0x4c],r8
	pc4.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
	pc4.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc4.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc4.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */

	pc5.cdty = 5; /* Channel duty cycle, should be < CPRD. */
8000215a:	50 b8       	stdsp	sp[0x2c],r8
	avr32_pwm_channel_t pc2 = { .ccnt = 0 };
	avr32_pwm_channel_t pc3 = { .ccnt = 0 };
	avr32_pwm_channel_t pc4 = { .ccnt = 0 };
	avr32_pwm_channel_t pc5 = { .ccnt = 0 };
	
	pc1.cdty = 5; /* Channel duty cycle, should be < CPRD. */
8000215c:	32 88       	mov	r8,40
	pc1.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
	pc1.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc1.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc1.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */	

	pc2.cdty = 5; /* Channel duty cycle, should be < CPRD. */
8000215e:	30 07       	mov	r7,0
	pc2.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
	pc2.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc2.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc2.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */

	pc3.cdty = 5; /* Channel duty cycle, should be < CPRD. */
80002160:	50 48       	stdsp	sp[0x10],r8
	pc3.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
	pc3.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc3.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc3.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */

	pc4.cdty = 5; /* Channel duty cycle, should be < CPRD. */
80002162:	52 48       	stdsp	sp[0x90],r8
	avr32_pwm_channel_t pc3 = { .ccnt = 0 };
	avr32_pwm_channel_t pc4 = { .ccnt = 0 };
	avr32_pwm_channel_t pc5 = { .ccnt = 0 };
	
	pc1.cdty = 5; /* Channel duty cycle, should be < CPRD. */
	pc1.cprd = 40; /* Channel period. */
80002164:	51 c8       	stdsp	sp[0x70],r8
	pc1.cupd = 0; /* Channel update is not used here. */
80002166:	51 48       	stdsp	sp[0x50],r8
	pc4.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc4.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc4.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */

	pc5.cdty = 5; /* Channel duty cycle, should be < CPRD. */
	pc5.cprd = 40; /* Channel period. */
80002168:	50 c8       	stdsp	sp[0x30],r8
	avr32_pwm_channel_t pc3 = { .ccnt = 0 };
	avr32_pwm_channel_t pc4 = { .ccnt = 0 };
	avr32_pwm_channel_t pc5 = { .ccnt = 0 };
	
	pc1.cdty = 5; /* Channel duty cycle, should be < CPRD. */
	pc1.cprd = 40; /* Channel period. */
8000216a:	30 7c       	mov	r12,7
	pc1.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc1.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc1.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */	

	pc2.cdty = 5; /* Channel duty cycle, should be < CPRD. */
	pc2.cprd = 40; /* Channel period. */
8000216c:	0e 9b       	mov	r11,r7
	pc2.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc2.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc2.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */

	pc3.cdty = 5; /* Channel duty cycle, should be < CPRD. */
	pc3.cprd = 40; /* Channel period. */
8000216e:	52 2c       	stdsp	sp[0x88],r12
	pc3.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc3.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc3.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */

	pc4.cdty = 5; /* Channel duty cycle, should be < CPRD. */
	pc4.cprd = 40; /* Channel period. */
80002170:	51 ac       	stdsp	sp[0x68],r12
	pc1.cprd = 40; /* Channel period. */
	pc1.cupd = 0; /* Channel update is not used here. */
	pc1.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
	pc1.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc1.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc1.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */	
80002172:	51 2c       	stdsp	sp[0x48],r12


	
	/* Enable the alternative mode of the output pin to connect it to the PWM
	 * module within the device. */
	gpio_enable_module_pin(P1_PWM_PIN, P1_PWM_FUNCTION);
80002174:	50 ac       	stdsp	sp[0x28],r12
	pc1.cprd = 40; /* Channel period. */
	pc1.cupd = 0; /* Channel update is not used here. */
	pc1.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
	pc1.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc1.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc1.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */	
80002176:	50 2c       	stdsp	sp[0x8],r12
	pc2.cprd = 40; /* Channel period. */
	pc2.cupd = 0; /* Channel update is not used here. */
	pc2.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
	pc2.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc2.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc2.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */
80002178:	cf 9c       	rcall	8000236a <gpio_enable_module_pin>
	pc3.cprd = 40; /* Channel period. */
	pc3.cupd = 0; /* Channel update is not used here. */
	pc3.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
	pc3.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc3.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc3.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */
8000217a:	0e 9b       	mov	r11,r7
	pc4.cprd = 40; /* Channel period. */
	pc4.cupd = 0; /* Channel update is not used here. */
	pc4.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
	pc4.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc4.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc4.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */
8000217c:	30 8c       	mov	r12,8
	pc5.cprd = 40; /* Channel period. */
	pc5.cupd = 0; /* Channel update is not used here. */
	pc5.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
	pc5.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
	pc5.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
	pc5.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_128; /* Channel prescaler. */
8000217e:	cf 6c       	rcall	8000236a <gpio_enable_module_pin>


	
	/* Enable the alternative mode of the output pin to connect it to the PWM
	 * module within the device. */
	gpio_enable_module_pin(P1_PWM_PIN, P1_PWM_FUNCTION);
80002180:	0e 9b       	mov	r11,r7
80002182:	31 5c       	mov	r12,21
	gpio_enable_module_pin(P2_PWM_PIN, P2_PWM_FUNCTION);
80002184:	cf 3c       	rcall	8000236a <gpio_enable_module_pin>
80002186:	30 1b       	mov	r11,1
80002188:	30 ec       	mov	r12,14
8000218a:	cf 0c       	rcall	8000236a <gpio_enable_module_pin>
	gpio_enable_module_pin(P3_PWM_PIN, P3_PWM_FUNCTION);
8000218c:	30 1b       	mov	r11,1
8000218e:	30 fc       	mov	r12,15
80002190:	ce dc       	rcall	8000236a <gpio_enable_module_pin>
80002192:	fa cc ff 58 	sub	r12,sp,-168
	gpio_enable_module_pin(P4_PWM_PIN, P4_PWM_FUNCTION);
80002196:	ca 4d       	rcall	800024de <pwm_init>
80002198:	0c 9b       	mov	r11,r6
8000219a:	0e 9c       	mov	r12,r7
	gpio_enable_module_pin(P5_PWM_PIN, P5_PWM_FUNCTION);
8000219c:	c7 0d       	rcall	8000247c <pwm_channel_init>
8000219e:	0a 9b       	mov	r11,r5
800021a0:	30 1c       	mov	r12,1
800021a2:	c6 dd       	rcall	8000247c <pwm_channel_init>

	/* Initialize the PWM module. */
	pwm_init(&pwm_opt);
800021a4:	08 9b       	mov	r11,r4
800021a6:	30 2c       	mov	r12,2
800021a8:	c6 ad       	rcall	8000247c <pwm_channel_init>
800021aa:	fa cb ff d8 	sub	r11,sp,-40

	/* Set channel configuration to channel 0. */
	pwm_channel_init(P1_PWM_CHANNEL_ID, &pc1);
800021ae:	30 3c       	mov	r12,3
800021b0:	c6 6d       	rcall	8000247c <pwm_channel_init>
800021b2:	04 9b       	mov	r11,r2
	pwm_channel_init(P2_PWM_CHANNEL_ID, &pc2);
800021b4:	30 4c       	mov	r12,4
800021b6:	c6 3d       	rcall	8000247c <pwm_channel_init>
800021b8:	30 1c       	mov	r12,1
800021ba:	c7 9d       	rcall	800024ac <pwm_start_channels>
	pwm_channel_init(P3_PWM_CHANNEL_ID, &pc3);
800021bc:	30 2c       	mov	r12,2
800021be:	c7 7d       	rcall	800024ac <pwm_start_channels>
800021c0:	30 4c       	mov	r12,4
800021c2:	c7 5d       	rcall	800024ac <pwm_start_channels>
	pwm_channel_init(P4_PWM_CHANNEL_ID, &pc4);
800021c4:	30 8c       	mov	r12,8
800021c6:	c7 3d       	rcall	800024ac <pwm_start_channels>
800021c8:	31 0c       	mov	r12,16
800021ca:	c7 1d       	rcall	800024ac <pwm_start_channels>
800021cc:	30 03       	mov	r3,0
	pwm_channel_init(P5_PWM_CHANNEL_ID, &pc5);
800021ce:	e0 68 03 e8 	mov	r8,1000
800021d2:	30 09       	mov	r9,0
800021d4:	e0 60 87 00 	mov	r0,34560

	/* Start channel 0. */
	pwm_start_channels(1 << P1_PWM_CHANNEL_ID);
800021d8:	ea 10 03 93 	orh	r0,0x393
	pwm_start_channels(1 << P2_PWM_CHANNEL_ID);
800021dc:	0e 91       	mov	r1,r7
800021de:	e0 62 03 e7 	mov	r2,999
	pwm_start_channels(1 << P3_PWM_CHANNEL_ID);
800021e2:	e0 02 00 0a 	add	r10,r0,r2
800021e6:	e2 03 00 4b 	adc	r11,r1,r3
	pwm_start_channels(1 << P4_PWM_CHANNEL_ID);
800021ea:	c0 18       	rjmp	800021ec <main+0x11c>
800021ec:	00 00       	add	r0,r0
	pwm_start_channels(1 << P5_PWM_CHANNEL_ID);
800021ee:	e2 01 00 41 	adc	r1,r1,r1
800021f2:	cf 1d       	rcall	800025d4 <__avr32_udiv64>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800021f4:	e0 68 03 e8 	mov	r8,1000
800021f8:	50 1a       	stdsp	sp[0x4],r10
800021fa:	30 09       	mov	r9,0
800021fc:	e0 02 00 0a 	add	r10,r0,r2
80002200:	e2 03 00 4b 	adc	r11,r1,r3
80002204:	0c 91       	mov	r1,r6
80002206:	ce 7d       	rcall	800025d4 <__avr32_udiv64>
80002208:	fa c3 ff d8 	sub	r3,sp,-40
8000220c:	30 16       	mov	r6,1
8000220e:	50 0a       	stdsp	sp[0x0],r10
80002210:	e1 b8 00 42 	mfsr	r8,0x108
80002214:	40 12       	lddsp	r2,sp[0x4]
80002216:	f0 02 00 0a 	add	r10,r8,r2
8000221a:	e1 b9 00 42 	mfsr	r9,0x108
8000221e:	14 38       	cp.w	r8,r10
80002220:	e0 88 00 05 	brls	8000222a <main+0x15a>
80002224:	10 39       	cp.w	r9,r8
80002226:	cf a2       	brcc	8000221a <main+0x14a>
80002228:	c0 38       	rjmp	8000222e <main+0x15e>
8000222a:	10 39       	cp.w	r9,r8
8000222c:	c1 33       	brcs	80002252 <main+0x182>
8000222e:	14 39       	cp.w	r9,r10
80002230:	e0 8b 00 11 	brhi	80002252 <main+0x182>
80002234:	cf 3b       	rjmp	8000221a <main+0x14a>
80002236:	e1 b9 00 42 	mfsr	r9,0x108
8000223a:	14 38       	cp.w	r8,r10
8000223c:	e0 88 00 05 	brls	80002246 <main+0x176>
80002240:	10 39       	cp.w	r9,r8
80002242:	cf a2       	brcc	80002236 <main+0x166>
80002244:	c0 38       	rjmp	8000224a <main+0x17a>
80002246:	10 39       	cp.w	r9,r8
80002248:	c4 83       	brcs	800022d8 <main+0x208>
8000224a:	14 39       	cp.w	r9,r10
8000224c:	e0 8b 00 46 	brhi	800022d8 <main+0x208>
80002250:	cf 3b       	rjmp	80002236 <main+0x166>
80002252:	fe 7c 3c 00 	mov	r12,-50176
80002256:	c7 6c       	rcall	80002342 <adc_start>
80002258:	30 0b       	mov	r11,0
		adc_value_temp = (adc_value_temp >> 2) + 4;


		pc1.CMR.cpd = PWM_UPDATE_PERIOD;
		pc1.cupd = (adc_value_light);
 		pwm_async_update_channel(P1_PWM_CHANNEL_ID, &pc1);
8000225a:	fe 7c 3c 00 	mov	r12,-50176
8000225e:	c7 ac       	rcall	80002352 <adc_get_value>
 		pc3.CMR.cpd = PWM_UPDATE_PERIOD;
		pc3.cupd = (adc_value_temp);
 		pwm_async_update_channel(P3_PWM_CHANNEL_ID, &pc3);
 		pc4.CMR.cpd = PWM_UPDATE_PERIOD;
		pc4.cupd = (adc_value_temp);
 		pwm_async_update_channel(P4_PWM_CHANNEL_ID, &pc4);
80002260:	30 1b       	mov	r11,1
80002262:	e5 dc b0 4e 	bfexts	r2,r12,0x2,0xe
80002266:	fe 7c 3c 00 	mov	r12,-50176
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000226a:	c7 4c       	rcall	80002352 <adc_get_value>
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000226c:	42 28       	lddsp	r8,sp[0x88]
8000226e:	f1 d6 d1 41 	bfins	r8,r6,0xa,0x1
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002272:	e1 dc b0 10 	bfexts	r0,r12,0x0,0x10
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002276:	52 28       	stdsp	sp[0x88],r8
80002278:	02 9b       	mov	r11,r1
8000227a:	52 60       	stdsp	sp[0x98],r0
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000227c:	30 0c       	mov	r12,0
8000227e:	c2 0d       	rcall	800024be <pwm_async_update_channel>
80002280:	41 a8       	lddsp	r8,sp[0x68]
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002282:	f1 d6 d1 41 	bfins	r8,r6,0xa,0x1
80002286:	0a 9b       	mov	r11,r5
80002288:	51 a8       	stdsp	sp[0x68],r8
8000228a:	0c 9c       	mov	r12,r6
8000228c:	2f c2       	sub	r2,-4
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000228e:	5c 82       	casts.h	r2
80002290:	a3 42       	asr	r2,0x2
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002292:	2f c2       	sub	r2,-4
80002294:	5c 82       	casts.h	r2
80002296:	51 e2       	stdsp	sp[0x78],r2
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002298:	c1 3d       	rcall	800024be <pwm_async_update_channel>
8000229a:	41 28       	lddsp	r8,sp[0x48]
8000229c:	f1 d6 d1 41 	bfins	r8,r6,0xa,0x1
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800022a0:	08 9b       	mov	r11,r4
800022a2:	51 28       	stdsp	sp[0x48],r8
800022a4:	51 62       	stdsp	sp[0x58],r2
800022a6:	30 2c       	mov	r12,2
800022a8:	c0 bd       	rcall	800024be <pwm_async_update_channel>


	while (true) {
		delay_ms(1);
		/* Start conversions on all enabled channels */
		adc_start(&AVR32_ADC);
800022aa:	40 a8       	lddsp	r8,sp[0x28]
800022ac:	f1 d6 d1 41 	bfins	r8,r6,0xa,0x1
800022b0:	06 9b       	mov	r11,r3

		/* Get value for the temperature adc channel */
		adc_value_temp = adc_get_value(&AVR32_ADC,
800022b2:	50 a8       	stdsp	sp[0x28],r8
800022b4:	50 e2       	stdsp	sp[0x38],r2
800022b6:	30 3c       	mov	r12,3
800022b8:	c0 3d       	rcall	800024be <pwm_async_update_channel>
800022ba:	40 28       	lddsp	r8,sp[0x8]
				EXAMPLE_ADC_TEMPERATURE_CHANNEL);

		adc_value_temp = (adc_value_temp >> 2) + 4;

		/* Get value for the light adc channel */
		adc_value_light = adc_get_value(&AVR32_ADC,
800022bc:	f1 d6 d1 41 	bfins	r8,r6,0xa,0x1

		/* Get value for the temperature adc channel */
		adc_value_temp = adc_get_value(&AVR32_ADC,
				EXAMPLE_ADC_TEMPERATURE_CHANNEL);

		adc_value_temp = (adc_value_temp >> 2) + 4;
800022c0:	50 62       	stdsp	sp[0x18],r2

		/* Get value for the light adc channel */
		adc_value_light = adc_get_value(&AVR32_ADC,
800022c2:	50 28       	stdsp	sp[0x8],r8
800022c4:	fa cb ff f8 	sub	r11,sp,-8
800022c8:	30 4c       	mov	r12,4
				EXAMPLE_ADC_LIGHT_CHANNEL);

		adc_value_temp = (adc_value_temp >> 2) + 4;


		pc1.CMR.cpd = PWM_UPDATE_PERIOD;
800022ca:	cf ac       	rcall	800024be <pwm_async_update_channel>
800022cc:	e1 b8 00 42 	mfsr	r8,0x108
				EXAMPLE_ADC_TEMPERATURE_CHANNEL);

		adc_value_temp = (adc_value_temp >> 2) + 4;

		/* Get value for the light adc channel */
		adc_value_light = adc_get_value(&AVR32_ADC,
800022d0:	40 09       	lddsp	r9,sp[0x0]
800022d2:	f0 09 00 0a 	add	r10,r8,r9
		adc_value_temp = (adc_value_temp >> 2) + 4;


		pc1.CMR.cpd = PWM_UPDATE_PERIOD;
		pc1.cupd = (adc_value_light);
 		pwm_async_update_channel(P1_PWM_CHANNEL_ID, &pc1);
800022d6:	cb 0b       	rjmp	80002236 <main+0x166>

		adc_value_temp = (adc_value_temp >> 2) + 4;


		pc1.CMR.cpd = PWM_UPDATE_PERIOD;
		pc1.cupd = (adc_value_light);
800022d8:	42 28       	lddsp	r8,sp[0x88]
 		pwm_async_update_channel(P1_PWM_CHANNEL_ID, &pc1);
800022da:	f1 d7 d1 41 	bfins	r8,r7,0xa,0x1
800022de:	02 9b       	mov	r11,r1
 		pc2.CMR.cpd = PWM_UPDATE_PERIOD;
800022e0:	52 28       	stdsp	sp[0x88],r8
800022e2:	a1 50       	asr	r0,0x1
800022e4:	0e 9c       	mov	r12,r7
		pc2.cupd = (adc_value_temp);
 		pwm_async_update_channel(P2_PWM_CHANNEL_ID, &pc2);
800022e6:	52 60       	stdsp	sp[0x98],r0


		pc1.CMR.cpd = PWM_UPDATE_PERIOD;
		pc1.cupd = (adc_value_light);
 		pwm_async_update_channel(P1_PWM_CHANNEL_ID, &pc1);
 		pc2.CMR.cpd = PWM_UPDATE_PERIOD;
800022e8:	ce bc       	rcall	800024be <pwm_async_update_channel>
		pc2.cupd = (adc_value_temp);
 		pwm_async_update_channel(P2_PWM_CHANNEL_ID, &pc2);
800022ea:	41 a8       	lddsp	r8,sp[0x68]

		/* Get value for the temperature adc channel */
		adc_value_temp = adc_get_value(&AVR32_ADC,
				EXAMPLE_ADC_TEMPERATURE_CHANNEL);

		adc_value_temp = (adc_value_temp >> 2) + 4;
800022ec:	f1 d7 d1 41 	bfins	r8,r7,0xa,0x1

		/* Get value for the light adc channel */
		adc_value_light = adc_get_value(&AVR32_ADC,
				EXAMPLE_ADC_LIGHT_CHANNEL);

		adc_value_temp = (adc_value_temp >> 2) + 4;
800022f0:	a1 52       	asr	r2,0x1
800022f2:	51 a8       	stdsp	sp[0x68],r8
800022f4:	0a 9b       	mov	r11,r5

		pc1.CMR.cpd = PWM_UPDATE_PERIOD;
		pc1.cupd = (adc_value_light);
 		pwm_async_update_channel(P1_PWM_CHANNEL_ID, &pc1);
 		pc2.CMR.cpd = PWM_UPDATE_PERIOD;
		pc2.cupd = (adc_value_temp);
800022f6:	51 e2       	stdsp	sp[0x78],r2
 		pwm_async_update_channel(P2_PWM_CHANNEL_ID, &pc2);
800022f8:	30 1c       	mov	r12,1
800022fa:	ce 2c       	rcall	800024be <pwm_async_update_channel>
 		pc3.CMR.cpd = PWM_UPDATE_PERIOD;
800022fc:	41 28       	lddsp	r8,sp[0x48]
800022fe:	f1 d7 d1 41 	bfins	r8,r7,0xa,0x1
		pc3.cupd = (adc_value_temp);
 		pwm_async_update_channel(P3_PWM_CHANNEL_ID, &pc3);
80002302:	08 9b       	mov	r11,r4
		pc1.cupd = (adc_value_light);
 		pwm_async_update_channel(P1_PWM_CHANNEL_ID, &pc1);
 		pc2.CMR.cpd = PWM_UPDATE_PERIOD;
		pc2.cupd = (adc_value_temp);
 		pwm_async_update_channel(P2_PWM_CHANNEL_ID, &pc2);
 		pc3.CMR.cpd = PWM_UPDATE_PERIOD;
80002304:	51 28       	stdsp	sp[0x48],r8
		pc3.cupd = (adc_value_temp);
80002306:	51 62       	stdsp	sp[0x58],r2
 		pwm_async_update_channel(P3_PWM_CHANNEL_ID, &pc3);
80002308:	30 2c       	mov	r12,2
8000230a:	cd ac       	rcall	800024be <pwm_async_update_channel>
8000230c:	40 a8       	lddsp	r8,sp[0x28]
 		pc4.CMR.cpd = PWM_UPDATE_PERIOD;
8000230e:	f1 d7 d1 41 	bfins	r8,r7,0xa,0x1
80002312:	06 9b       	mov	r11,r3
		pc4.cupd = (adc_value_temp);
 		pwm_async_update_channel(P4_PWM_CHANNEL_ID, &pc4);
80002314:	50 a8       	stdsp	sp[0x28],r8
		pc2.cupd = (adc_value_temp);
 		pwm_async_update_channel(P2_PWM_CHANNEL_ID, &pc2);
 		pc3.CMR.cpd = PWM_UPDATE_PERIOD;
		pc3.cupd = (adc_value_temp);
 		pwm_async_update_channel(P3_PWM_CHANNEL_ID, &pc3);
 		pc4.CMR.cpd = PWM_UPDATE_PERIOD;
80002316:	50 e2       	stdsp	sp[0x38],r2
		pc4.cupd = (adc_value_temp);
80002318:	30 3c       	mov	r12,3
 		pwm_async_update_channel(P4_PWM_CHANNEL_ID, &pc4);
8000231a:	cd 2c       	rcall	800024be <pwm_async_update_channel>
8000231c:	40 28       	lddsp	r8,sp[0x8]
8000231e:	f1 d7 d1 41 	bfins	r8,r7,0xa,0x1
 		pc5.CMR.cpd = PWM_UPDATE_PERIOD;
80002322:	50 62       	stdsp	sp[0x18],r2
80002324:	50 28       	stdsp	sp[0x8],r8
		pc5.cupd = (adc_value_temp);
80002326:	fa cb ff f8 	sub	r11,sp,-8
 		pwm_async_update_channel(P5_PWM_CHANNEL_ID, &pc5);
8000232a:	30 4c       	mov	r12,4
8000232c:	cc 9c       	rcall	800024be <pwm_async_update_channel>
8000232e:	c7 1b       	rjmp	80002210 <main+0x140>

80002330 <adc_configure>:
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
80002330:	78 18       	ld.w	r8,r12[0x4]
80002332:	ea 18 0f 00 	orh	r8,0xf00
80002336:	99 18       	st.w	r12[0x4],r8

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80002338:	78 18       	ld.w	r8,r12[0x4]
8000233a:	ea 18 00 1f 	orh	r8,0x1f
8000233e:	99 18       	st.w	r12[0x4],r8
}
80002340:	5e fc       	retal	r12

80002342 <adc_start>:
void adc_start(volatile avr32_adc_t *adc)
{
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
80002342:	30 28       	mov	r8,2
80002344:	99 08       	st.w	r12[0x0],r8
}
80002346:	5e fc       	retal	r12

80002348 <adc_enable>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80002348:	30 18       	mov	r8,1
8000234a:	f0 0b 09 48 	lsl	r8,r8,r11
8000234e:	99 48       	st.w	r12[0x10],r8
}
80002350:	5e fc       	retal	r12

80002352 <adc_get_value>:
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80002352:	30 18       	mov	r8,1
80002354:	f0 0b 09 48 	lsl	r8,r8,r11
80002358:	78 79       	ld.w	r9,r12[0x1c]
{
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
8000235a:	f1 e9 00 09 	and	r9,r8,r9
8000235e:	cf d0       	breq	80002358 <adc_get_value+0x6>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
80002360:	5c 7b       	castu.h	r11
80002362:	2d 0c       	sub	r12,-48
}
80002364:	f8 0b 03 2c 	ld.w	r12,r12[r11<<0x2]
80002368:	5e fc       	retal	r12

8000236a <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000236a:	f8 08 16 05 	lsr	r8,r12,0x5
8000236e:	a9 68       	lsl	r8,0x8
80002370:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002374:	58 1b       	cp.w	r11,1
80002376:	c0 d0       	breq	80002390 <gpio_enable_module_pin+0x26>
80002378:	c0 63       	brcs	80002384 <gpio_enable_module_pin+0x1a>
8000237a:	58 2b       	cp.w	r11,2
8000237c:	c0 f0       	breq	8000239a <gpio_enable_module_pin+0x30>
8000237e:	58 3b       	cp.w	r11,3
80002380:	c1 20       	breq	800023a4 <gpio_enable_module_pin+0x3a>
80002382:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002384:	30 19       	mov	r9,1
80002386:	f2 0c 09 49 	lsl	r9,r9,r12
8000238a:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000238c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000238e:	c1 08       	rjmp	800023ae <gpio_enable_module_pin+0x44>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002390:	f6 0c 09 4b 	lsl	r11,r11,r12
80002394:	91 5b       	st.w	r8[0x14],r11
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002396:	91 ab       	st.w	r8[0x28],r11
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002398:	c0 b8       	rjmp	800023ae <gpio_enable_module_pin+0x44>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000239a:	30 19       	mov	r9,1
8000239c:	f2 0c 09 49 	lsl	r9,r9,r12
800023a0:	91 69       	st.w	r8[0x18],r9
800023a2:	c0 58       	rjmp	800023ac <gpio_enable_module_pin+0x42>
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800023a4:	30 19       	mov	r9,1
800023a6:	f2 0c 09 49 	lsl	r9,r9,r12
800023aa:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800023ac:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800023ae:	30 19       	mov	r9,1
800023b0:	f2 0c 09 4c 	lsl	r12,r9,r12
800023b4:	91 2c       	st.w	r8[0x8],r12
800023b6:	5e fd       	retal	0

800023b8 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800023b8:	d4 21       	pushm	r4-r7,lr
800023ba:	30 07       	mov	r7,0
800023bc:	18 96       	mov	r6,r12
800023be:	16 94       	mov	r4,r11
800023c0:	0e 95       	mov	r5,r7
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800023c2:	c0 78       	rjmp	800023d0 <gpio_enable_module+0x18>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800023c4:	6c 1b       	ld.w	r11,r6[0x4]
800023c6:	6c 0c       	ld.w	r12,r6[0x0]
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800023c8:	2f f7       	sub	r7,-1
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
800023ca:	2f 86       	sub	r6,-8
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800023cc:	cc ff       	rcall	8000236a <gpio_enable_module_pin>
800023ce:	18 45       	or	r5,r12
800023d0:	08 37       	cp.w	r7,r4
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800023d2:	cf 93       	brcs	800023c4 <gpio_enable_module+0xc>
800023d4:	0a 9c       	mov	r12,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800023d6:	d8 22       	popm	r4-r7,pc

800023d8 <flashc_set_bus_freq>:
}


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
800023d8:	e0 68 8a 3f 	mov	r8,35391
800023dc:	ea 18 01 f7 	orh	r8,0x1f7
800023e0:	10 3c       	cp.w	r12,r8
800023e2:	e0 88 00 07 	brls	800023f0 <flashc_set_bus_freq+0x18>
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800023e6:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800023ea:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800023ec:	70 09       	ld.w	r9,r8[0x0]
800023ee:	c0 58       	rjmp	800023f8 <flashc_set_bus_freq+0x20>
800023f0:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800023f4:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800023f6:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800023f8:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800023fc:	91 09       	st.w	r8[0x0],r9
800023fe:	5e fc       	retal	r12

80002400 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002400:	c0 08       	rjmp	80002400 <_unhandled_interrupt>
80002402:	d7 03       	nop

80002404 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002404:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002406:	fe c8 f2 06 	sub	r8,pc,-3578
8000240a:	e3 b8 00 01 	mtsr	0x4,r8
8000240e:	fe ce f1 0a 	sub	lr,pc,-3830
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002412:	fe c9 ef ea 	sub	r9,pc,-4118

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002416:	10 1e       	sub	lr,r8
80002418:	fe cc 00 18 	sub	r12,pc,24
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
8000241c:	30 08       	mov	r8,0
8000241e:	fe 7b 08 00 	mov	r11,-63488
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002422:	c0 e8       	rjmp	8000243e <INTC_init_interrupts+0x3a>
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002424:	72 16       	ld.w	r6,r9[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002426:	ec 0a 00 26 	add	r6,r6,r10<<0x2

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000242a:	2f fa       	sub	r10,-1
8000242c:	8d 0c       	st.w	r6[0x0],r12
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000242e:	0e 3a       	cp.w	r10,r7
80002430:	cf a3       	brcs	80002424 <INTC_init_interrupts+0x20>
80002432:	f6 08 09 2e 	st.w	r11[r8<<0x2],lr
80002436:	2f 89       	sub	r9,-8
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002438:	2f f8       	sub	r8,-1
8000243a:	59 28       	cp.w	r8,18
8000243c:	c0 40       	breq	80002444 <INTC_init_interrupts+0x40>
8000243e:	30 0a       	mov	r10,0
80002440:	72 07       	ld.w	r7,r9[0x0]
80002442:	cf 6b       	rjmp	8000242e <INTC_init_interrupts+0x2a>
80002444:	d8 22       	popm	r4-r7,pc
80002446:	d7 03       	nop

80002448 <_get_interrupt_handler>:
80002448:	e0 68 00 83 	mov	r8,131
8000244c:	fe 79 08 00 	mov	r9,-63488
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002450:	f0 0c 01 0c 	sub	r12,r8,r12
80002454:	f2 0c 03 28 	ld.w	r8,r9[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002458:	f0 ca ff c0 	sub	r10,r8,-64
8000245c:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002460:	58 0c       	cp.w	r12,0
80002462:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002464:	fe c9 f0 3c 	sub	r9,pc,-4036
80002468:	f8 0c 12 00 	clz	r12,r12
8000246c:	f2 08 00 38 	add	r8,r9,r8<<0x3
80002470:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002474:	70 18       	ld.w	r8,r8[0x4]
80002476:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000247a:	5e fc       	retal	r12

8000247c <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
8000247c:	58 0b       	cp.w	r11,0
8000247e:	c1 60       	breq	800024aa <pwm_channel_init+0x2e>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80002480:	58 6c       	cp.w	r12,6
80002482:	e0 8b 00 14 	brhi	800024aa <pwm_channel_init+0x2e>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80002486:	76 09       	ld.w	r9,r11[0x0]
80002488:	f8 08 15 05 	lsl	r8,r12,0x5
8000248c:	e0 28 ce 00 	sub	r8,52736
80002490:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80002492:	a5 7c       	lsl	r12,0x5
80002494:	76 19       	ld.w	r9,r11[0x4]
80002496:	fe 7a 32 04 	mov	r10,-52732
8000249a:	f8 0a 00 08 	add	r8,r12,r10
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
8000249e:	e0 2c cd f8 	sub	r12,52728
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800024a2:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
800024a4:	76 28       	ld.w	r8,r11[0x8]
800024a6:	99 08       	st.w	r12[0x0],r8
800024a8:	5e fd       	retal	0

  return PWM_SUCCESS;
800024aa:	5e ff       	retal	1

800024ac <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
800024ac:	18 98       	mov	r8,r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800024ae:	e0 1c ff 80 	andl	r12,0xff80
800024b2:	c0 20       	breq	800024b6 <pwm_start_channels+0xa>
800024b4:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
800024b6:	fe 79 30 00 	mov	r9,-53248
800024ba:	93 18       	st.w	r9[0x4],r8

  return PWM_SUCCESS;
}
800024bc:	5e fc       	retal	r12

800024be <pwm_async_update_channel>:

int pwm_async_update_channel(unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (channel_id > AVR32_PWM_LINES_MSB)
800024be:	58 6c       	cp.w	r12,6
800024c0:	e0 88 00 03 	brls	800024c6 <pwm_async_update_channel+0x8>
800024c4:	5e ff       	retal	1
     return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode register: update of the period or duty cycle.
800024c6:	76 09       	ld.w	r9,r11[0x0]
800024c8:	f8 08 15 05 	lsl	r8,r12,0x5
  pwm->channel[channel_id].cupd= pwm_channel->cupd; // Channel update CPRDx or CDTYx according to CPD value in CMRx.
800024cc:	a5 7c       	lsl	r12,0x5
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (channel_id > AVR32_PWM_LINES_MSB)
     return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode register: update of the period or duty cycle.
800024ce:	e0 28 ce 00 	sub	r8,52736
  pwm->channel[channel_id].cupd= pwm_channel->cupd; // Channel update CPRDx or CDTYx according to CPD value in CMRx.
800024d2:	e0 2c cd f0 	sub	r12,52720
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (channel_id > AVR32_PWM_LINES_MSB)
     return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode register: update of the period or duty cycle.
800024d6:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cupd= pwm_channel->cupd; // Channel update CPRDx or CDTYx according to CPD value in CMRx.
800024d8:	76 48       	ld.w	r8,r11[0x10]
800024da:	99 08       	st.w	r12[0x0],r8
800024dc:	5e fd       	retal	0

800024de <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800024de:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
800024e2:	58 0c       	cp.w	r12,0
800024e4:	c0 21       	brne	800024e8 <pwm_init+0xa>
800024e6:	5e ff       	retal	1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
800024e8:	ee 18 00 01 	eorh	r8,0x1
800024ec:	f1 d8 c2 01 	bfextu	r8,r8,0x10,0x1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
800024f0:	c0 20       	breq	800024f4 <pwm_init+0x16>
800024f2:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800024f4:	fe 79 30 00 	mov	r9,-53248
800024f8:	37 fa       	mov	r10,127
800024fa:	93 5a       	st.w	r9[0x14],r10
  pwm->isr;
800024fc:	72 79       	ld.w	r9,r9[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800024fe:	58 08       	cp.w	r8,0
80002500:	c0 20       	breq	80002504 <pwm_init+0x26>
80002502:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80002504:	78 28       	ld.w	r8,r12[0x8]
80002506:	78 0a       	ld.w	r10,r12[0x0]
80002508:	78 39       	ld.w	r9,r12[0xc]
8000250a:	a9 69       	lsl	r9,0x8
8000250c:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80002510:	78 1a       	ld.w	r10,r12[0x4]
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80002512:	30 0c       	mov	r12,0
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80002514:	14 49       	or	r9,r10
80002516:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
8000251a:	fe 78 30 00 	mov	r8,-53248
8000251e:	91 09       	st.w	r8[0x0],r9
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
}
80002520:	5e fc       	retal	r12

80002522 <T.62>:
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80002522:	fe 78 0c 00 	mov	r8,-62464
80002526:	71 59       	ld.w	r9,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80002528:	ed b9 00 07 	bld	r9,0x7
8000252c:	5e 0c       	reteq	r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000252e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002532:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80002534:	e0 6a 03 07 	mov	r10,775
80002538:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000253a:	70 0a       	ld.w	r10,r8[0x0]
8000253c:	a3 aa       	sbr	r10,0x2
8000253e:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002540:	ed b9 00 10 	bld	r9,0x10
80002544:	c0 20       	breq	80002548 <T.62+0x26>
      cpu_irq_enable();
80002546:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80002548:	fe 79 0c 00 	mov	r9,-62464
8000254c:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
8000254e:	ed b8 00 07 	bld	r8,0x7
80002552:	cf d1       	brne	8000254c <T.62+0x2a>
80002554:	5e fc       	retal	r12
80002556:	d7 03       	nop

80002558 <pll_enable_config_defaults>:
		break;
	}
}

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
80002558:	d4 21       	pushm	r4-r7,lr

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000255a:	fe 78 0c 00 	mov	r8,-62464
8000255e:	71 58       	ld.w	r8,r8[0x54]
80002560:	30 16       	mov	r6,1
		break;
	}
}

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
80002562:	18 97       	mov	r7,r12

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80002564:	ec 0c 09 46 	lsl	r6,r6,r12
{
	struct pll_config pllcfg;

	pllcfg.ctrl = 0;	// HACK 8/4/14 (bc) to remove warning

	if (pll_is_locked(pll_id)) {
80002568:	ed e8 00 08 	and	r8,r6,r8
8000256c:	c1 b1       	brne	800025a2 <pll_enable_config_defaults+0x4a>
		return; // Pll already running
	}
	switch (pll_id) {
8000256e:	58 0c       	cp.w	r12,0
80002570:	c0 40       	breq	80002578 <pll_enable_config_defaults+0x20>
80002572:	58 1c       	cp.w	r12,1
80002574:	c0 d1       	brne	8000258e <pll_enable_config_defaults+0x36>
80002576:	c0 78       	rjmp	80002584 <pll_enable_config_defaults+0x2c>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
80002578:	cd 5f       	rcall	80002522 <T.62>
8000257a:	e0 68 01 0c 	mov	r8,268
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000257e:	ea 18 3f 09 	orh	r8,0x3f09
80002582:	c0 68       	rjmp	8000258e <pll_enable_config_defaults+0x36>
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_init(&pllcfg,
				CONFIG_PLL0_SOURCE,
				CONFIG_PLL0_DIV,
				CONFIG_PLL0_MUL);
		break;
80002584:	cc ff       	rcall	80002522 <T.62>
#endif
#ifdef CONFIG_PLL1_SOURCE
	case 1:
		pll_enable_source(CONFIG_PLL1_SOURCE);
80002586:	e0 68 01 0c 	mov	r8,268
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000258a:	ea 18 3f 07 	orh	r8,0x3f07
8000258e:	a1 a8       	sbr	r8,0x0
80002590:	2f 87       	sub	r7,-8
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80002592:	fe 79 0c 00 	mov	r9,-62464
80002596:	f2 07 09 28 	st.w	r9[r7<<0x2],r8
8000259a:	73 58       	ld.w	r8,r9[0x54]
8000259c:	ed e8 00 08 	and	r8,r6,r8
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
800025a0:	cf d0       	breq	8000259a <pll_enable_config_defaults+0x42>
800025a2:	d8 22       	popm	r4-r7,pc

800025a4 <sysclk_init>:
800025a4:	d4 01       	pushm	lr
800025a6:	30 0c       	mov	r12,0
800025a8:	cd 8f       	rcall	80002558 <pll_enable_config_defaults>
800025aa:	e0 6c 87 00 	mov	r12,34560

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
800025ae:	ea 1c 03 93 	orh	r12,0x393
800025b2:	c1 3f       	rcall	800023d8 <flashc_set_bus_freq>
800025b4:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025b8:	d3 03       	ssrf	0x10
800025ba:	fe 7a 0c 00 	mov	r10,-62464
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
800025be:	74 08       	ld.w	r8,r10[0x0]
800025c0:	e0 18 ff fc 	andl	r8,0xfffc
800025c4:	a1 b8       	sbr	r8,0x1
800025c6:	95 08       	st.w	r10[0x0],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
800025c8:	ed b9 00 10 	bld	r9,0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800025cc:	c0 20       	breq	800025d0 <sysclk_init+0x2c>
800025ce:	d5 03       	csrf	0x10
800025d0:	d8 02       	popm	pc
      cpu_irq_enable();
800025d2:	d7 03       	nop

800025d4 <__avr32_udiv64>:
800025d4:	d4 31       	pushm	r0-r7,lr
800025d6:	1a 97       	mov	r7,sp
800025d8:	20 2d       	sub	sp,8
800025da:	10 9c       	mov	r12,r8
800025dc:	12 9e       	mov	lr,r9
800025de:	14 93       	mov	r3,r10
800025e0:	58 09       	cp.w	r9,0
800025e2:	e0 81 00 cd 	brne	8000277c <__avr32_udiv64+0x1a8>
800025e6:	16 38       	cp.w	r8,r11
800025e8:	e0 88 00 45 	brls	80002672 <__avr32_udiv64+0x9e>
800025ec:	f0 08 12 00 	clz	r8,r8
800025f0:	c0 d0       	breq	8000260a <__avr32_udiv64+0x36>
800025f2:	f6 08 09 4b 	lsl	r11,r11,r8
800025f6:	f0 09 11 20 	rsub	r9,r8,32
800025fa:	f8 08 09 4c 	lsl	r12,r12,r8
800025fe:	f4 09 0a 49 	lsr	r9,r10,r9
80002602:	f4 08 09 43 	lsl	r3,r10,r8
80002606:	f3 eb 10 0b 	or	r11,r9,r11
8000260a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000260e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80002612:	f6 0e 0d 00 	divu	r0,r11,lr
80002616:	e6 0b 16 10 	lsr	r11,r3,0x10
8000261a:	00 99       	mov	r9,r0
8000261c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002620:	e0 0a 02 48 	mul	r8,r0,r10
80002624:	10 3b       	cp.w	r11,r8
80002626:	c0 d2       	brcc	80002640 <__avr32_udiv64+0x6c>
80002628:	20 19       	sub	r9,1
8000262a:	18 0b       	add	r11,r12
8000262c:	18 3b       	cp.w	r11,r12
8000262e:	c0 93       	brcs	80002640 <__avr32_udiv64+0x6c>
80002630:	f2 c5 00 01 	sub	r5,r9,1
80002634:	f6 0c 00 06 	add	r6,r11,r12
80002638:	10 3b       	cp.w	r11,r8
8000263a:	c0 32       	brcc	80002640 <__avr32_udiv64+0x6c>
8000263c:	0a 99       	mov	r9,r5
8000263e:	0c 9b       	mov	r11,r6
80002640:	f6 08 01 01 	sub	r1,r11,r8
80002644:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80002648:	e2 0e 0d 00 	divu	r0,r1,lr
8000264c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80002650:	00 98       	mov	r8,r0
80002652:	e0 0a 02 4a 	mul	r10,r0,r10
80002656:	14 33       	cp.w	r3,r10
80002658:	c0 a2       	brcc	8000266c <__avr32_udiv64+0x98>
8000265a:	20 18       	sub	r8,1
8000265c:	18 03       	add	r3,r12
8000265e:	18 33       	cp.w	r3,r12
80002660:	c0 63       	brcs	8000266c <__avr32_udiv64+0x98>
80002662:	f0 cb 00 01 	sub	r11,r8,1
80002666:	14 33       	cp.w	r3,r10
80002668:	f6 08 17 30 	movlo	r8,r11
8000266c:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002670:	ce c8       	rjmp	80002848 <__avr32_udiv64+0x274>
80002672:	58 08       	cp.w	r8,0
80002674:	c0 51       	brne	8000267e <__avr32_udiv64+0xaa>
80002676:	30 19       	mov	r9,1
80002678:	f2 08 0d 08 	divu	r8,r9,r8
8000267c:	10 9c       	mov	r12,r8
8000267e:	f8 06 12 00 	clz	r6,r12
80002682:	c0 41       	brne	8000268a <__avr32_udiv64+0xb6>
80002684:	18 1b       	sub	r11,r12
80002686:	30 19       	mov	r9,1
80002688:	c4 68       	rjmp	80002714 <__avr32_udiv64+0x140>
8000268a:	ec 01 11 20 	rsub	r1,r6,32
8000268e:	f4 01 0a 49 	lsr	r9,r10,r1
80002692:	f8 06 09 4c 	lsl	r12,r12,r6
80002696:	f6 06 09 48 	lsl	r8,r11,r6
8000269a:	f6 01 0a 41 	lsr	r1,r11,r1
8000269e:	f3 e8 10 08 	or	r8,r9,r8
800026a2:	f8 03 16 10 	lsr	r3,r12,0x10
800026a6:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800026aa:	e2 03 0d 00 	divu	r0,r1,r3
800026ae:	f0 0b 16 10 	lsr	r11,r8,0x10
800026b2:	00 9e       	mov	lr,r0
800026b4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800026b8:	e0 05 02 49 	mul	r9,r0,r5
800026bc:	12 3b       	cp.w	r11,r9
800026be:	c0 d2       	brcc	800026d8 <__avr32_udiv64+0x104>
800026c0:	20 1e       	sub	lr,1
800026c2:	18 0b       	add	r11,r12
800026c4:	18 3b       	cp.w	r11,r12
800026c6:	c0 93       	brcs	800026d8 <__avr32_udiv64+0x104>
800026c8:	fc c1 00 01 	sub	r1,lr,1
800026cc:	f6 0c 00 02 	add	r2,r11,r12
800026d0:	12 3b       	cp.w	r11,r9
800026d2:	c0 32       	brcc	800026d8 <__avr32_udiv64+0x104>
800026d4:	02 9e       	mov	lr,r1
800026d6:	04 9b       	mov	r11,r2
800026d8:	12 1b       	sub	r11,r9
800026da:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800026de:	f6 03 0d 02 	divu	r2,r11,r3
800026e2:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800026e6:	04 99       	mov	r9,r2
800026e8:	e4 05 02 4b 	mul	r11,r2,r5
800026ec:	16 38       	cp.w	r8,r11
800026ee:	c0 d2       	brcc	80002708 <__avr32_udiv64+0x134>
800026f0:	20 19       	sub	r9,1
800026f2:	18 08       	add	r8,r12
800026f4:	18 38       	cp.w	r8,r12
800026f6:	c0 93       	brcs	80002708 <__avr32_udiv64+0x134>
800026f8:	f2 c3 00 01 	sub	r3,r9,1
800026fc:	f0 0c 00 05 	add	r5,r8,r12
80002700:	16 38       	cp.w	r8,r11
80002702:	c0 32       	brcc	80002708 <__avr32_udiv64+0x134>
80002704:	06 99       	mov	r9,r3
80002706:	0a 98       	mov	r8,r5
80002708:	f4 06 09 43 	lsl	r3,r10,r6
8000270c:	f0 0b 01 0b 	sub	r11,r8,r11
80002710:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80002714:	f8 06 16 10 	lsr	r6,r12,0x10
80002718:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000271c:	f6 06 0d 00 	divu	r0,r11,r6
80002720:	e6 0b 16 10 	lsr	r11,r3,0x10
80002724:	00 9a       	mov	r10,r0
80002726:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000272a:	e0 0e 02 48 	mul	r8,r0,lr
8000272e:	10 3b       	cp.w	r11,r8
80002730:	c0 d2       	brcc	8000274a <__avr32_udiv64+0x176>
80002732:	20 1a       	sub	r10,1
80002734:	18 0b       	add	r11,r12
80002736:	18 3b       	cp.w	r11,r12
80002738:	c0 93       	brcs	8000274a <__avr32_udiv64+0x176>
8000273a:	f4 c2 00 01 	sub	r2,r10,1
8000273e:	f6 0c 00 05 	add	r5,r11,r12
80002742:	10 3b       	cp.w	r11,r8
80002744:	c0 32       	brcc	8000274a <__avr32_udiv64+0x176>
80002746:	04 9a       	mov	r10,r2
80002748:	0a 9b       	mov	r11,r5
8000274a:	f6 08 01 01 	sub	r1,r11,r8
8000274e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80002752:	e2 06 0d 00 	divu	r0,r1,r6
80002756:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000275a:	00 98       	mov	r8,r0
8000275c:	e0 0e 02 4b 	mul	r11,r0,lr
80002760:	16 33       	cp.w	r3,r11
80002762:	c0 a2       	brcc	80002776 <__avr32_udiv64+0x1a2>
80002764:	20 18       	sub	r8,1
80002766:	18 03       	add	r3,r12
80002768:	18 33       	cp.w	r3,r12
8000276a:	c0 63       	brcs	80002776 <__avr32_udiv64+0x1a2>
8000276c:	f0 cc 00 01 	sub	r12,r8,1
80002770:	16 33       	cp.w	r3,r11
80002772:	f8 08 17 30 	movlo	r8,r12
80002776:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000277a:	c6 b8       	rjmp	80002850 <__avr32_udiv64+0x27c>
8000277c:	16 39       	cp.w	r9,r11
8000277e:	e0 8b 00 67 	brhi	8000284c <__avr32_udiv64+0x278>
80002782:	f2 09 12 00 	clz	r9,r9
80002786:	c0 b1       	brne	8000279c <__avr32_udiv64+0x1c8>
80002788:	10 3a       	cp.w	r10,r8
8000278a:	5f 2a       	srhs	r10
8000278c:	1c 3b       	cp.w	r11,lr
8000278e:	5f b8       	srhi	r8
80002790:	10 4a       	or	r10,r8
80002792:	f2 0a 18 00 	cp.b	r10,r9
80002796:	c5 b0       	breq	8000284c <__avr32_udiv64+0x278>
80002798:	30 18       	mov	r8,1
8000279a:	c5 b8       	rjmp	80002850 <__avr32_udiv64+0x27c>
8000279c:	f2 03 11 20 	rsub	r3,r9,32
800027a0:	fc 09 09 4e 	lsl	lr,lr,r9
800027a4:	f6 09 09 4c 	lsl	r12,r11,r9
800027a8:	f4 03 0a 42 	lsr	r2,r10,r3
800027ac:	f0 09 09 46 	lsl	r6,r8,r9
800027b0:	f0 03 0a 48 	lsr	r8,r8,r3
800027b4:	f6 03 0a 43 	lsr	r3,r11,r3
800027b8:	18 42       	or	r2,r12
800027ba:	f1 ee 10 0c 	or	r12,r8,lr
800027be:	f8 01 16 10 	lsr	r1,r12,0x10
800027c2:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800027c6:	e6 01 0d 04 	divu	r4,r3,r1
800027ca:	e4 03 16 10 	lsr	r3,r2,0x10
800027ce:	08 98       	mov	r8,r4
800027d0:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800027d4:	e8 0e 02 45 	mul	r5,r4,lr
800027d8:	0a 33       	cp.w	r3,r5
800027da:	c0 d2       	brcc	800027f4 <__avr32_udiv64+0x220>
800027dc:	20 18       	sub	r8,1
800027de:	18 03       	add	r3,r12
800027e0:	18 33       	cp.w	r3,r12
800027e2:	c0 93       	brcs	800027f4 <__avr32_udiv64+0x220>
800027e4:	f0 c0 00 01 	sub	r0,r8,1
800027e8:	e6 0c 00 0b 	add	r11,r3,r12
800027ec:	0a 33       	cp.w	r3,r5
800027ee:	c0 32       	brcc	800027f4 <__avr32_udiv64+0x220>
800027f0:	00 98       	mov	r8,r0
800027f2:	16 93       	mov	r3,r11
800027f4:	0a 13       	sub	r3,r5
800027f6:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800027fa:	e6 01 0d 00 	divu	r0,r3,r1
800027fe:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002802:	00 93       	mov	r3,r0
80002804:	e0 0e 02 4e 	mul	lr,r0,lr
80002808:	1c 3b       	cp.w	r11,lr
8000280a:	c0 d2       	brcc	80002824 <__avr32_udiv64+0x250>
8000280c:	20 13       	sub	r3,1
8000280e:	18 0b       	add	r11,r12
80002810:	18 3b       	cp.w	r11,r12
80002812:	c0 93       	brcs	80002824 <__avr32_udiv64+0x250>
80002814:	f6 0c 00 0c 	add	r12,r11,r12
80002818:	e6 c5 00 01 	sub	r5,r3,1
8000281c:	1c 3b       	cp.w	r11,lr
8000281e:	c0 32       	brcc	80002824 <__avr32_udiv64+0x250>
80002820:	0a 93       	mov	r3,r5
80002822:	18 9b       	mov	r11,r12
80002824:	e7 e8 11 08 	or	r8,r3,r8<<0x10
80002828:	1c 1b       	sub	r11,lr
8000282a:	f0 06 06 42 	mulu.d	r2,r8,r6
8000282e:	06 96       	mov	r6,r3
80002830:	16 36       	cp.w	r6,r11
80002832:	e0 8b 00 0a 	brhi	80002846 <__avr32_udiv64+0x272>
80002836:	5f 0b       	sreq	r11
80002838:	f4 09 09 49 	lsl	r9,r10,r9
8000283c:	12 32       	cp.w	r2,r9
8000283e:	5f b9       	srhi	r9
80002840:	f7 e9 00 09 	and	r9,r11,r9
80002844:	c0 60       	breq	80002850 <__avr32_udiv64+0x27c>
80002846:	20 18       	sub	r8,1
80002848:	30 09       	mov	r9,0
8000284a:	c0 38       	rjmp	80002850 <__avr32_udiv64+0x27c>
8000284c:	30 09       	mov	r9,0
8000284e:	12 98       	mov	r8,r9
80002850:	10 9a       	mov	r10,r8
80002852:	12 93       	mov	r3,r9
80002854:	10 92       	mov	r2,r8
80002856:	12 9b       	mov	r11,r9
80002858:	2f ed       	sub	sp,-8
8000285a:	d8 32       	popm	r0-r7,pc

8000285c <atexit>:
8000285c:	d4 01       	pushm	lr
8000285e:	30 09       	mov	r9,0
80002860:	18 9b       	mov	r11,r12
80002862:	12 9a       	mov	r10,r9
80002864:	12 9c       	mov	r12,r9
80002866:	c3 fc       	rcall	800028e4 <__register_exitproc>
80002868:	d8 02       	popm	pc
8000286a:	d7 03       	nop

8000286c <exit>:
8000286c:	d4 21       	pushm	r4-r7,lr
8000286e:	30 0b       	mov	r11,0
80002870:	18 97       	mov	r7,r12
80002872:	c8 9c       	rcall	80002984 <__call_exitprocs>
80002874:	fe c8 f3 b8 	sub	r8,pc,-3144
80002878:	70 0c       	ld.w	r12,r8[0x0]
8000287a:	78 a8       	ld.w	r8,r12[0x28]
8000287c:	58 08       	cp.w	r8,0
8000287e:	c0 20       	breq	80002882 <exit+0x16>
80002880:	5d 18       	icall	r8
80002882:	0e 9c       	mov	r12,r7
80002884:	c0 fc       	rcall	800028a2 <_exit>
80002886:	d7 03       	nop

80002888 <memset>:
80002888:	18 98       	mov	r8,r12
8000288a:	c0 38       	rjmp	80002890 <memset+0x8>
8000288c:	10 cb       	st.b	r8++,r11
8000288e:	20 1a       	sub	r10,1
80002890:	58 0a       	cp.w	r10,0
80002892:	cf d1       	brne	8000288c <memset+0x4>
80002894:	5e fc       	retal	r12

80002896 <_init_startup>:
80002896:	5e fd       	retal	0

80002898 <_init_argv>:
80002898:	30 e8       	mov	r8,14
8000289a:	d6 73       	breakpoint
8000289c:	3f fc       	mov	r12,-1
8000289e:	35 8b       	mov	r11,88
800028a0:	5e fc       	retal	r12

800028a2 <_exit>:
800028a2:	30 d8       	mov	r8,13
800028a4:	d6 73       	breakpoint
800028a6:	3f fc       	mov	r12,-1
800028a8:	35 8b       	mov	r11,88
800028aa:	c0 08       	rjmp	800028aa <_exit+0x8>

800028ac <_sbrk>:
800028ac:	d4 01       	pushm	lr
800028ae:	e0 68 05 cc 	mov	r8,1484
800028b2:	70 09       	ld.w	r9,r8[0x0]
800028b4:	58 09       	cp.w	r9,0
800028b6:	c0 41       	brne	800028be <_sbrk+0x12>
800028b8:	e0 69 06 08 	mov	r9,1544
800028bc:	91 09       	st.w	r8[0x0],r9
800028be:	e0 69 05 cc 	mov	r9,1484
800028c2:	e0 6a 70 00 	mov	r10,28672
800028c6:	72 08       	ld.w	r8,r9[0x0]
800028c8:	f0 0c 00 0c 	add	r12,r8,r12
800028cc:	14 3c       	cp.w	r12,r10
800028ce:	e0 8b 00 04 	brhi	800028d6 <_sbrk+0x2a>
800028d2:	93 0c       	st.w	r9[0x0],r12
800028d4:	c0 58       	rjmp	800028de <_sbrk+0x32>
800028d6:	cb bc       	rcall	80002a4c <__errno>
800028d8:	30 c8       	mov	r8,12
800028da:	99 08       	st.w	r12[0x0],r8
800028dc:	3f f8       	mov	r8,-1
800028de:	10 9c       	mov	r12,r8
800028e0:	d8 02       	popm	pc
800028e2:	d7 03       	nop

800028e4 <__register_exitproc>:
800028e4:	d4 31       	pushm	r0-r7,lr
800028e6:	fe c8 f4 2a 	sub	r8,pc,-3030
800028ea:	18 97       	mov	r7,r12
800028ec:	70 03       	ld.w	r3,r8[0x0]
800028ee:	16 96       	mov	r6,r11
800028f0:	14 95       	mov	r5,r10
800028f2:	12 92       	mov	r2,r9
800028f4:	67 24       	ld.w	r4,r3[0x48]
800028f6:	58 04       	cp.w	r4,0
800028f8:	c0 51       	brne	80002902 <__register_exitproc+0x1e>
800028fa:	e6 c4 ff b4 	sub	r4,r3,-76
800028fe:	e7 44 00 48 	st.w	r3[72],r4
80002902:	68 18       	ld.w	r8,r4[0x4]
80002904:	59 f8       	cp.w	r8,31
80002906:	e0 8a 00 0d 	brle	80002920 <__register_exitproc+0x3c>
8000290a:	e0 6c 00 8c 	mov	r12,140
8000290e:	ca dc       	rcall	80002a68 <malloc>
80002910:	18 94       	mov	r4,r12
80002912:	c3 80       	breq	80002982 <__register_exitproc+0x9e>
80002914:	67 28       	ld.w	r8,r3[0x48]
80002916:	99 08       	st.w	r12[0x0],r8
80002918:	e7 4c 00 48 	st.w	r3[72],r12
8000291c:	30 08       	mov	r8,0
8000291e:	99 18       	st.w	r12[0x4],r8
80002920:	58 07       	cp.w	r7,0
80002922:	c2 70       	breq	80002970 <__register_exitproc+0x8c>
80002924:	e8 fc 00 88 	ld.w	r12,r4[136]
80002928:	58 0c       	cp.w	r12,0
8000292a:	c0 c1       	brne	80002942 <__register_exitproc+0x5e>
8000292c:	e0 6c 01 08 	mov	r12,264
80002930:	c9 cc       	rcall	80002a68 <malloc>
80002932:	c2 80       	breq	80002982 <__register_exitproc+0x9e>
80002934:	30 08       	mov	r8,0
80002936:	e9 4c 00 88 	st.w	r4[136],r12
8000293a:	f9 48 01 04 	st.w	r12[260],r8
8000293e:	f9 48 01 00 	st.w	r12[256],r8
80002942:	68 18       	ld.w	r8,r4[0x4]
80002944:	f0 c9 ff e0 	sub	r9,r8,-32
80002948:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
8000294c:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80002950:	30 1a       	mov	r10,1
80002952:	f8 f9 01 00 	ld.w	r9,r12[256]
80002956:	f4 08 09 48 	lsl	r8,r10,r8
8000295a:	10 49       	or	r9,r8
8000295c:	f9 49 01 00 	st.w	r12[256],r9
80002960:	58 27       	cp.w	r7,2
80002962:	c0 71       	brne	80002970 <__register_exitproc+0x8c>
80002964:	f8 f9 01 04 	ld.w	r9,r12[260]
80002968:	f3 e8 10 08 	or	r8,r9,r8
8000296c:	f9 48 01 04 	st.w	r12[260],r8
80002970:	68 18       	ld.w	r8,r4[0x4]
80002972:	30 0c       	mov	r12,0
80002974:	f0 c9 ff ff 	sub	r9,r8,-1
80002978:	2f e8       	sub	r8,-2
8000297a:	89 19       	st.w	r4[0x4],r9
8000297c:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80002980:	d8 32       	popm	r0-r7,pc
80002982:	dc 3a       	popm	r0-r7,pc,r12=-1

80002984 <__call_exitprocs>:
80002984:	d4 31       	pushm	r0-r7,lr
80002986:	20 3d       	sub	sp,12
80002988:	fe c8 f4 cc 	sub	r8,pc,-2868
8000298c:	50 2c       	stdsp	sp[0x8],r12
8000298e:	70 08       	ld.w	r8,r8[0x0]
80002990:	16 91       	mov	r1,r11
80002992:	50 08       	stdsp	sp[0x0],r8
80002994:	2b 88       	sub	r8,-72
80002996:	50 18       	stdsp	sp[0x4],r8
80002998:	40 0a       	lddsp	r10,sp[0x0]
8000299a:	40 14       	lddsp	r4,sp[0x4]
8000299c:	75 27       	ld.w	r7,r10[0x48]
8000299e:	c5 28       	rjmp	80002a42 <__call_exitprocs+0xbe>
800029a0:	6e 15       	ld.w	r5,r7[0x4]
800029a2:	ee f6 00 88 	ld.w	r6,r7[136]
800029a6:	ea c2 ff ff 	sub	r2,r5,-1
800029aa:	20 15       	sub	r5,1
800029ac:	ee 02 00 22 	add	r2,r7,r2<<0x2
800029b0:	ec 05 00 23 	add	r3,r6,r5<<0x2
800029b4:	c3 48       	rjmp	80002a1c <__call_exitprocs+0x98>
800029b6:	58 01       	cp.w	r1,0
800029b8:	c0 70       	breq	800029c6 <__call_exitprocs+0x42>
800029ba:	58 06       	cp.w	r6,0
800029bc:	c2 d0       	breq	80002a16 <__call_exitprocs+0x92>
800029be:	e6 f8 00 80 	ld.w	r8,r3[128]
800029c2:	02 38       	cp.w	r8,r1
800029c4:	c2 91       	brne	80002a16 <__call_exitprocs+0x92>
800029c6:	6e 19       	ld.w	r9,r7[0x4]
800029c8:	64 08       	ld.w	r8,r2[0x0]
800029ca:	20 19       	sub	r9,1
800029cc:	12 35       	cp.w	r5,r9
800029ce:	c0 31       	brne	800029d4 <__call_exitprocs+0x50>
800029d0:	8f 15       	st.w	r7[0x4],r5
800029d2:	c0 38       	rjmp	800029d8 <__call_exitprocs+0x54>
800029d4:	30 09       	mov	r9,0
800029d6:	85 09       	st.w	r2[0x0],r9
800029d8:	58 08       	cp.w	r8,0
800029da:	c1 e0       	breq	80002a16 <__call_exitprocs+0x92>
800029dc:	6e 10       	ld.w	r0,r7[0x4]
800029de:	58 06       	cp.w	r6,0
800029e0:	c0 90       	breq	800029f2 <__call_exitprocs+0x6e>
800029e2:	30 1a       	mov	r10,1
800029e4:	f4 05 09 49 	lsl	r9,r10,r5
800029e8:	ec fa 01 00 	ld.w	r10,r6[256]
800029ec:	f3 ea 00 0a 	and	r10,r9,r10
800029f0:	c0 31       	brne	800029f6 <__call_exitprocs+0x72>
800029f2:	5d 18       	icall	r8
800029f4:	c0 b8       	rjmp	80002a0a <__call_exitprocs+0x86>
800029f6:	ec fa 01 04 	ld.w	r10,r6[260]
800029fa:	66 0b       	ld.w	r11,r3[0x0]
800029fc:	14 69       	and	r9,r10
800029fe:	c0 41       	brne	80002a06 <__call_exitprocs+0x82>
80002a00:	40 2c       	lddsp	r12,sp[0x8]
80002a02:	5d 18       	icall	r8
80002a04:	c0 38       	rjmp	80002a0a <__call_exitprocs+0x86>
80002a06:	16 9c       	mov	r12,r11
80002a08:	5d 18       	icall	r8
80002a0a:	6e 18       	ld.w	r8,r7[0x4]
80002a0c:	10 30       	cp.w	r0,r8
80002a0e:	cc 51       	brne	80002998 <__call_exitprocs+0x14>
80002a10:	68 08       	ld.w	r8,r4[0x0]
80002a12:	0e 38       	cp.w	r8,r7
80002a14:	cc 21       	brne	80002998 <__call_exitprocs+0x14>
80002a16:	20 15       	sub	r5,1
80002a18:	20 43       	sub	r3,4
80002a1a:	20 42       	sub	r2,4
80002a1c:	58 05       	cp.w	r5,0
80002a1e:	cc c4       	brge	800029b6 <__call_exitprocs+0x32>
80002a20:	6e 18       	ld.w	r8,r7[0x4]
80002a22:	58 08       	cp.w	r8,0
80002a24:	c0 d1       	brne	80002a3e <__call_exitprocs+0xba>
80002a26:	6e 08       	ld.w	r8,r7[0x0]
80002a28:	58 08       	cp.w	r8,0
80002a2a:	c0 a0       	breq	80002a3e <__call_exitprocs+0xba>
80002a2c:	89 08       	st.w	r4[0x0],r8
80002a2e:	58 06       	cp.w	r6,0
80002a30:	c0 30       	breq	80002a36 <__call_exitprocs+0xb2>
80002a32:	0c 9c       	mov	r12,r6
80002a34:	c1 2c       	rcall	80002a58 <free>
80002a36:	0e 9c       	mov	r12,r7
80002a38:	c1 0c       	rcall	80002a58 <free>
80002a3a:	68 07       	ld.w	r7,r4[0x0]
80002a3c:	c0 38       	rjmp	80002a42 <__call_exitprocs+0xbe>
80002a3e:	0e 94       	mov	r4,r7
80002a40:	6e 07       	ld.w	r7,r7[0x0]
80002a42:	58 07       	cp.w	r7,0
80002a44:	ca e1       	brne	800029a0 <__call_exitprocs+0x1c>
80002a46:	2f dd       	sub	sp,-12
80002a48:	d8 32       	popm	r0-r7,pc
80002a4a:	d7 03       	nop

80002a4c <__errno>:
80002a4c:	e0 68 01 0c 	mov	r8,268
80002a50:	70 0c       	ld.w	r12,r8[0x0]
80002a52:	2f 4c       	sub	r12,-12
80002a54:	5e fc       	retal	r12
80002a56:	d7 03       	nop

80002a58 <free>:
80002a58:	d4 01       	pushm	lr
80002a5a:	e0 68 01 0c 	mov	r8,268
80002a5e:	18 9b       	mov	r11,r12
80002a60:	70 0c       	ld.w	r12,r8[0x0]
80002a62:	e0 a0 02 77 	rcall	80002f50 <_free_r>
80002a66:	d8 02       	popm	pc

80002a68 <malloc>:
80002a68:	d4 01       	pushm	lr
80002a6a:	e0 68 01 0c 	mov	r8,268
80002a6e:	18 9b       	mov	r11,r12
80002a70:	70 0c       	ld.w	r12,r8[0x0]
80002a72:	c0 3c       	rcall	80002a78 <_malloc_r>
80002a74:	d8 02       	popm	pc
80002a76:	d7 03       	nop

80002a78 <_malloc_r>:
80002a78:	d4 31       	pushm	r0-r7,lr
80002a7a:	f6 c8 ff f5 	sub	r8,r11,-11
80002a7e:	18 95       	mov	r5,r12
80002a80:	10 97       	mov	r7,r8
80002a82:	e0 17 ff f8 	andl	r7,0xfff8
80002a86:	59 68       	cp.w	r8,22
80002a88:	f9 b7 08 10 	movls	r7,16
80002a8c:	16 37       	cp.w	r7,r11
80002a8e:	5f 38       	srlo	r8
80002a90:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80002a94:	c0 50       	breq	80002a9e <_malloc_r+0x26>
80002a96:	30 c8       	mov	r8,12
80002a98:	99 38       	st.w	r12[0xc],r8
80002a9a:	e0 8f 01 f3 	bral	80002e80 <_malloc_r+0x408>
80002a9e:	e0 a0 02 01 	rcall	80002ea0 <__malloc_lock>
80002aa2:	e0 47 01 f7 	cp.w	r7,503
80002aa6:	e0 8b 00 1d 	brhi	80002ae0 <_malloc_r+0x68>
80002aaa:	ee 03 16 03 	lsr	r3,r7,0x3
80002aae:	e0 68 01 10 	mov	r8,272
80002ab2:	f0 03 00 38 	add	r8,r8,r3<<0x3
80002ab6:	70 36       	ld.w	r6,r8[0xc]
80002ab8:	10 36       	cp.w	r6,r8
80002aba:	c0 61       	brne	80002ac6 <_malloc_r+0x4e>
80002abc:	ec c8 ff f8 	sub	r8,r6,-8
80002ac0:	70 36       	ld.w	r6,r8[0xc]
80002ac2:	10 36       	cp.w	r6,r8
80002ac4:	c0 c0       	breq	80002adc <_malloc_r+0x64>
80002ac6:	6c 18       	ld.w	r8,r6[0x4]
80002ac8:	e0 18 ff fc 	andl	r8,0xfffc
80002acc:	6c 3a       	ld.w	r10,r6[0xc]
80002ace:	ec 08 00 09 	add	r9,r6,r8
80002ad2:	0a 9c       	mov	r12,r5
80002ad4:	6c 28       	ld.w	r8,r6[0x8]
80002ad6:	95 28       	st.w	r10[0x8],r8
80002ad8:	91 3a       	st.w	r8[0xc],r10
80002ada:	c4 78       	rjmp	80002b68 <_malloc_r+0xf0>
80002adc:	2f e3       	sub	r3,-2
80002ade:	c4 d8       	rjmp	80002b78 <_malloc_r+0x100>
80002ae0:	ee 03 16 09 	lsr	r3,r7,0x9
80002ae4:	c0 41       	brne	80002aec <_malloc_r+0x74>
80002ae6:	ee 03 16 03 	lsr	r3,r7,0x3
80002aea:	c2 68       	rjmp	80002b36 <_malloc_r+0xbe>
80002aec:	58 43       	cp.w	r3,4
80002aee:	e0 8b 00 06 	brhi	80002afa <_malloc_r+0x82>
80002af2:	ee 03 16 06 	lsr	r3,r7,0x6
80002af6:	2c 83       	sub	r3,-56
80002af8:	c1 f8       	rjmp	80002b36 <_malloc_r+0xbe>
80002afa:	59 43       	cp.w	r3,20
80002afc:	e0 8b 00 04 	brhi	80002b04 <_malloc_r+0x8c>
80002b00:	2a 53       	sub	r3,-91
80002b02:	c1 a8       	rjmp	80002b36 <_malloc_r+0xbe>
80002b04:	e0 43 00 54 	cp.w	r3,84
80002b08:	e0 8b 00 06 	brhi	80002b14 <_malloc_r+0x9c>
80002b0c:	ee 03 16 0c 	lsr	r3,r7,0xc
80002b10:	29 23       	sub	r3,-110
80002b12:	c1 28       	rjmp	80002b36 <_malloc_r+0xbe>
80002b14:	e0 43 01 54 	cp.w	r3,340
80002b18:	e0 8b 00 06 	brhi	80002b24 <_malloc_r+0xac>
80002b1c:	ee 03 16 0f 	lsr	r3,r7,0xf
80002b20:	28 93       	sub	r3,-119
80002b22:	c0 a8       	rjmp	80002b36 <_malloc_r+0xbe>
80002b24:	e0 43 05 54 	cp.w	r3,1364
80002b28:	e0 88 00 04 	brls	80002b30 <_malloc_r+0xb8>
80002b2c:	37 e3       	mov	r3,126
80002b2e:	c0 48       	rjmp	80002b36 <_malloc_r+0xbe>
80002b30:	ee 03 16 12 	lsr	r3,r7,0x12
80002b34:	28 43       	sub	r3,-124
80002b36:	e0 6a 01 10 	mov	r10,272
80002b3a:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80002b3e:	74 36       	ld.w	r6,r10[0xc]
80002b40:	c1 98       	rjmp	80002b72 <_malloc_r+0xfa>
80002b42:	6c 19       	ld.w	r9,r6[0x4]
80002b44:	e0 19 ff fc 	andl	r9,0xfffc
80002b48:	f2 07 01 0b 	sub	r11,r9,r7
80002b4c:	58 fb       	cp.w	r11,15
80002b4e:	e0 8a 00 04 	brle	80002b56 <_malloc_r+0xde>
80002b52:	20 13       	sub	r3,1
80002b54:	c1 18       	rjmp	80002b76 <_malloc_r+0xfe>
80002b56:	6c 38       	ld.w	r8,r6[0xc]
80002b58:	58 0b       	cp.w	r11,0
80002b5a:	c0 b5       	brlt	80002b70 <_malloc_r+0xf8>
80002b5c:	6c 2a       	ld.w	r10,r6[0x8]
80002b5e:	ec 09 00 09 	add	r9,r6,r9
80002b62:	0a 9c       	mov	r12,r5
80002b64:	91 2a       	st.w	r8[0x8],r10
80002b66:	95 38       	st.w	r10[0xc],r8
80002b68:	72 18       	ld.w	r8,r9[0x4]
80002b6a:	a1 a8       	sbr	r8,0x0
80002b6c:	93 18       	st.w	r9[0x4],r8
80002b6e:	cb c8       	rjmp	80002ce6 <_malloc_r+0x26e>
80002b70:	10 96       	mov	r6,r8
80002b72:	14 36       	cp.w	r6,r10
80002b74:	ce 71       	brne	80002b42 <_malloc_r+0xca>
80002b76:	2f f3       	sub	r3,-1
80002b78:	e0 6a 01 10 	mov	r10,272
80002b7c:	f4 cc ff f8 	sub	r12,r10,-8
80002b80:	78 26       	ld.w	r6,r12[0x8]
80002b82:	18 36       	cp.w	r6,r12
80002b84:	c6 c0       	breq	80002c5c <_malloc_r+0x1e4>
80002b86:	6c 19       	ld.w	r9,r6[0x4]
80002b88:	e0 19 ff fc 	andl	r9,0xfffc
80002b8c:	f2 07 01 08 	sub	r8,r9,r7
80002b90:	58 f8       	cp.w	r8,15
80002b92:	e0 89 00 8f 	brgt	80002cb0 <_malloc_r+0x238>
80002b96:	99 3c       	st.w	r12[0xc],r12
80002b98:	99 2c       	st.w	r12[0x8],r12
80002b9a:	58 08       	cp.w	r8,0
80002b9c:	c0 55       	brlt	80002ba6 <_malloc_r+0x12e>
80002b9e:	ec 09 00 09 	add	r9,r6,r9
80002ba2:	0a 9c       	mov	r12,r5
80002ba4:	ce 2b       	rjmp	80002b68 <_malloc_r+0xf0>
80002ba6:	e0 49 01 ff 	cp.w	r9,511
80002baa:	e0 8b 00 13 	brhi	80002bd0 <_malloc_r+0x158>
80002bae:	a3 99       	lsr	r9,0x3
80002bb0:	f4 09 00 38 	add	r8,r10,r9<<0x3
80002bb4:	70 2b       	ld.w	r11,r8[0x8]
80002bb6:	8d 38       	st.w	r6[0xc],r8
80002bb8:	8d 2b       	st.w	r6[0x8],r11
80002bba:	97 36       	st.w	r11[0xc],r6
80002bbc:	91 26       	st.w	r8[0x8],r6
80002bbe:	a3 49       	asr	r9,0x2
80002bc0:	74 18       	ld.w	r8,r10[0x4]
80002bc2:	30 1b       	mov	r11,1
80002bc4:	f6 09 09 49 	lsl	r9,r11,r9
80002bc8:	f1 e9 10 09 	or	r9,r8,r9
80002bcc:	95 19       	st.w	r10[0x4],r9
80002bce:	c4 78       	rjmp	80002c5c <_malloc_r+0x1e4>
80002bd0:	f2 0a 16 09 	lsr	r10,r9,0x9
80002bd4:	58 4a       	cp.w	r10,4
80002bd6:	e0 8b 00 07 	brhi	80002be4 <_malloc_r+0x16c>
80002bda:	f2 0a 16 06 	lsr	r10,r9,0x6
80002bde:	2c 8a       	sub	r10,-56
80002be0:	c2 08       	rjmp	80002c20 <_malloc_r+0x1a8>
80002be2:	d7 03       	nop
80002be4:	59 4a       	cp.w	r10,20
80002be6:	e0 8b 00 04 	brhi	80002bee <_malloc_r+0x176>
80002bea:	2a 5a       	sub	r10,-91
80002bec:	c1 a8       	rjmp	80002c20 <_malloc_r+0x1a8>
80002bee:	e0 4a 00 54 	cp.w	r10,84
80002bf2:	e0 8b 00 06 	brhi	80002bfe <_malloc_r+0x186>
80002bf6:	f2 0a 16 0c 	lsr	r10,r9,0xc
80002bfa:	29 2a       	sub	r10,-110
80002bfc:	c1 28       	rjmp	80002c20 <_malloc_r+0x1a8>
80002bfe:	e0 4a 01 54 	cp.w	r10,340
80002c02:	e0 8b 00 06 	brhi	80002c0e <_malloc_r+0x196>
80002c06:	f2 0a 16 0f 	lsr	r10,r9,0xf
80002c0a:	28 9a       	sub	r10,-119
80002c0c:	c0 a8       	rjmp	80002c20 <_malloc_r+0x1a8>
80002c0e:	e0 4a 05 54 	cp.w	r10,1364
80002c12:	e0 88 00 04 	brls	80002c1a <_malloc_r+0x1a2>
80002c16:	37 ea       	mov	r10,126
80002c18:	c0 48       	rjmp	80002c20 <_malloc_r+0x1a8>
80002c1a:	f2 0a 16 12 	lsr	r10,r9,0x12
80002c1e:	28 4a       	sub	r10,-124
80002c20:	e0 6b 01 10 	mov	r11,272
80002c24:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80002c28:	68 28       	ld.w	r8,r4[0x8]
80002c2a:	08 38       	cp.w	r8,r4
80002c2c:	c0 e1       	brne	80002c48 <_malloc_r+0x1d0>
80002c2e:	76 19       	ld.w	r9,r11[0x4]
80002c30:	a3 4a       	asr	r10,0x2
80002c32:	30 1e       	mov	lr,1
80002c34:	fc 0a 09 4a 	lsl	r10,lr,r10
80002c38:	f3 ea 10 0a 	or	r10,r9,r10
80002c3c:	10 99       	mov	r9,r8
80002c3e:	97 1a       	st.w	r11[0x4],r10
80002c40:	c0 a8       	rjmp	80002c54 <_malloc_r+0x1dc>
80002c42:	70 28       	ld.w	r8,r8[0x8]
80002c44:	08 38       	cp.w	r8,r4
80002c46:	c0 60       	breq	80002c52 <_malloc_r+0x1da>
80002c48:	70 1a       	ld.w	r10,r8[0x4]
80002c4a:	e0 1a ff fc 	andl	r10,0xfffc
80002c4e:	14 39       	cp.w	r9,r10
80002c50:	cf 93       	brcs	80002c42 <_malloc_r+0x1ca>
80002c52:	70 39       	ld.w	r9,r8[0xc]
80002c54:	8d 39       	st.w	r6[0xc],r9
80002c56:	8d 28       	st.w	r6[0x8],r8
80002c58:	91 36       	st.w	r8[0xc],r6
80002c5a:	93 26       	st.w	r9[0x8],r6
80002c5c:	e6 08 14 02 	asr	r8,r3,0x2
80002c60:	30 1b       	mov	r11,1
80002c62:	e0 64 01 10 	mov	r4,272
80002c66:	f6 08 09 4b 	lsl	r11,r11,r8
80002c6a:	68 18       	ld.w	r8,r4[0x4]
80002c6c:	10 3b       	cp.w	r11,r8
80002c6e:	e0 8b 00 69 	brhi	80002d40 <_malloc_r+0x2c8>
80002c72:	f7 e8 00 09 	and	r9,r11,r8
80002c76:	c0 b1       	brne	80002c8c <_malloc_r+0x214>
80002c78:	e0 13 ff fc 	andl	r3,0xfffc
80002c7c:	a1 7b       	lsl	r11,0x1
80002c7e:	2f c3       	sub	r3,-4
80002c80:	c0 38       	rjmp	80002c86 <_malloc_r+0x20e>
80002c82:	2f c3       	sub	r3,-4
80002c84:	a1 7b       	lsl	r11,0x1
80002c86:	f7 e8 00 09 	and	r9,r11,r8
80002c8a:	cf c0       	breq	80002c82 <_malloc_r+0x20a>
80002c8c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80002c90:	06 92       	mov	r2,r3
80002c92:	1c 91       	mov	r1,lr
80002c94:	62 36       	ld.w	r6,r1[0xc]
80002c96:	c2 d8       	rjmp	80002cf0 <_malloc_r+0x278>
80002c98:	6c 1a       	ld.w	r10,r6[0x4]
80002c9a:	e0 1a ff fc 	andl	r10,0xfffc
80002c9e:	f4 07 01 08 	sub	r8,r10,r7
80002ca2:	58 f8       	cp.w	r8,15
80002ca4:	e0 8a 00 15 	brle	80002cce <_malloc_r+0x256>
80002ca8:	6c 3a       	ld.w	r10,r6[0xc]
80002caa:	6c 29       	ld.w	r9,r6[0x8]
80002cac:	95 29       	st.w	r10[0x8],r9
80002cae:	93 3a       	st.w	r9[0xc],r10
80002cb0:	0e 99       	mov	r9,r7
80002cb2:	ec 07 00 07 	add	r7,r6,r7
80002cb6:	a1 a9       	sbr	r9,0x0
80002cb8:	99 37       	st.w	r12[0xc],r7
80002cba:	99 27       	st.w	r12[0x8],r7
80002cbc:	8d 19       	st.w	r6[0x4],r9
80002cbe:	ee 08 09 08 	st.w	r7[r8],r8
80002cc2:	8f 2c       	st.w	r7[0x8],r12
80002cc4:	8f 3c       	st.w	r7[0xc],r12
80002cc6:	a1 a8       	sbr	r8,0x0
80002cc8:	0a 9c       	mov	r12,r5
80002cca:	8f 18       	st.w	r7[0x4],r8
80002ccc:	c0 d8       	rjmp	80002ce6 <_malloc_r+0x26e>
80002cce:	6c 39       	ld.w	r9,r6[0xc]
80002cd0:	58 08       	cp.w	r8,0
80002cd2:	c0 e5       	brlt	80002cee <_malloc_r+0x276>
80002cd4:	ec 0a 00 0a 	add	r10,r6,r10
80002cd8:	74 18       	ld.w	r8,r10[0x4]
80002cda:	a1 a8       	sbr	r8,0x0
80002cdc:	0a 9c       	mov	r12,r5
80002cde:	95 18       	st.w	r10[0x4],r8
80002ce0:	6c 28       	ld.w	r8,r6[0x8]
80002ce2:	93 28       	st.w	r9[0x8],r8
80002ce4:	91 39       	st.w	r8[0xc],r9
80002ce6:	cd ec       	rcall	80002ea2 <__malloc_unlock>
80002ce8:	ec cc ff f8 	sub	r12,r6,-8
80002cec:	d8 32       	popm	r0-r7,pc
80002cee:	12 96       	mov	r6,r9
80002cf0:	02 36       	cp.w	r6,r1
80002cf2:	cd 31       	brne	80002c98 <_malloc_r+0x220>
80002cf4:	2f f2       	sub	r2,-1
80002cf6:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80002cfa:	c0 30       	breq	80002d00 <_malloc_r+0x288>
80002cfc:	2f 81       	sub	r1,-8
80002cfe:	cc bb       	rjmp	80002c94 <_malloc_r+0x21c>
80002d00:	1c 98       	mov	r8,lr
80002d02:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80002d06:	c0 81       	brne	80002d16 <_malloc_r+0x29e>
80002d08:	68 19       	ld.w	r9,r4[0x4]
80002d0a:	f6 08 11 ff 	rsub	r8,r11,-1
80002d0e:	f3 e8 00 08 	and	r8,r9,r8
80002d12:	89 18       	st.w	r4[0x4],r8
80002d14:	c0 78       	rjmp	80002d22 <_malloc_r+0x2aa>
80002d16:	f0 c9 00 08 	sub	r9,r8,8
80002d1a:	20 13       	sub	r3,1
80002d1c:	70 08       	ld.w	r8,r8[0x0]
80002d1e:	12 38       	cp.w	r8,r9
80002d20:	cf 10       	breq	80002d02 <_malloc_r+0x28a>
80002d22:	a1 7b       	lsl	r11,0x1
80002d24:	68 18       	ld.w	r8,r4[0x4]
80002d26:	10 3b       	cp.w	r11,r8
80002d28:	e0 8b 00 0c 	brhi	80002d40 <_malloc_r+0x2c8>
80002d2c:	58 0b       	cp.w	r11,0
80002d2e:	c0 90       	breq	80002d40 <_malloc_r+0x2c8>
80002d30:	04 93       	mov	r3,r2
80002d32:	c0 38       	rjmp	80002d38 <_malloc_r+0x2c0>
80002d34:	2f c3       	sub	r3,-4
80002d36:	a1 7b       	lsl	r11,0x1
80002d38:	f7 e8 00 09 	and	r9,r11,r8
80002d3c:	ca 81       	brne	80002c8c <_malloc_r+0x214>
80002d3e:	cf bb       	rjmp	80002d34 <_malloc_r+0x2bc>
80002d40:	68 23       	ld.w	r3,r4[0x8]
80002d42:	66 12       	ld.w	r2,r3[0x4]
80002d44:	e0 12 ff fc 	andl	r2,0xfffc
80002d48:	0e 32       	cp.w	r2,r7
80002d4a:	5f 39       	srlo	r9
80002d4c:	e4 07 01 08 	sub	r8,r2,r7
80002d50:	58 f8       	cp.w	r8,15
80002d52:	5f aa       	srle	r10
80002d54:	f5 e9 10 09 	or	r9,r10,r9
80002d58:	e0 80 00 96 	breq	80002e84 <_malloc_r+0x40c>
80002d5c:	e0 68 05 d8 	mov	r8,1496
80002d60:	70 01       	ld.w	r1,r8[0x0]
80002d62:	e0 68 05 1c 	mov	r8,1308
80002d66:	2f 01       	sub	r1,-16
80002d68:	70 08       	ld.w	r8,r8[0x0]
80002d6a:	0e 01       	add	r1,r7
80002d6c:	5b f8       	cp.w	r8,-1
80002d6e:	c0 40       	breq	80002d76 <_malloc_r+0x2fe>
80002d70:	28 11       	sub	r1,-127
80002d72:	e0 11 ff 80 	andl	r1,0xff80
80002d76:	02 9b       	mov	r11,r1
80002d78:	0a 9c       	mov	r12,r5
80002d7a:	c9 5c       	rcall	80002ea4 <_sbrk_r>
80002d7c:	18 96       	mov	r6,r12
80002d7e:	5b fc       	cp.w	r12,-1
80002d80:	c7 20       	breq	80002e64 <_malloc_r+0x3ec>
80002d82:	e6 02 00 08 	add	r8,r3,r2
80002d86:	10 3c       	cp.w	r12,r8
80002d88:	c0 32       	brcc	80002d8e <_malloc_r+0x316>
80002d8a:	08 33       	cp.w	r3,r4
80002d8c:	c6 c1       	brne	80002e64 <_malloc_r+0x3ec>
80002d8e:	e0 6a 05 dc 	mov	r10,1500
80002d92:	74 09       	ld.w	r9,r10[0x0]
80002d94:	e2 09 00 09 	add	r9,r1,r9
80002d98:	95 09       	st.w	r10[0x0],r9
80002d9a:	10 36       	cp.w	r6,r8
80002d9c:	c0 a1       	brne	80002db0 <_malloc_r+0x338>
80002d9e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80002da2:	c0 71       	brne	80002db0 <_malloc_r+0x338>
80002da4:	e2 02 00 02 	add	r2,r1,r2
80002da8:	68 28       	ld.w	r8,r4[0x8]
80002daa:	a1 a2       	sbr	r2,0x0
80002dac:	91 12       	st.w	r8[0x4],r2
80002dae:	c4 a8       	rjmp	80002e42 <_malloc_r+0x3ca>
80002db0:	e0 6a 05 1c 	mov	r10,1308
80002db4:	74 0b       	ld.w	r11,r10[0x0]
80002db6:	5b fb       	cp.w	r11,-1
80002db8:	c0 31       	brne	80002dbe <_malloc_r+0x346>
80002dba:	95 06       	st.w	r10[0x0],r6
80002dbc:	c0 78       	rjmp	80002dca <_malloc_r+0x352>
80002dbe:	ec 09 00 09 	add	r9,r6,r9
80002dc2:	e0 6a 05 dc 	mov	r10,1500
80002dc6:	10 19       	sub	r9,r8
80002dc8:	95 09       	st.w	r10[0x0],r9
80002dca:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80002dce:	c0 40       	breq	80002dd6 <_malloc_r+0x35e>
80002dd0:	f0 08 11 08 	rsub	r8,r8,8
80002dd4:	10 06       	add	r6,r8
80002dd6:	28 08       	sub	r8,-128
80002dd8:	ec 01 00 01 	add	r1,r6,r1
80002ddc:	0a 9c       	mov	r12,r5
80002dde:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80002de2:	f0 01 01 01 	sub	r1,r8,r1
80002de6:	02 9b       	mov	r11,r1
80002de8:	c5 ec       	rcall	80002ea4 <_sbrk_r>
80002dea:	30 08       	mov	r8,0
80002dec:	5b fc       	cp.w	r12,-1
80002dee:	c0 31       	brne	80002df4 <_malloc_r+0x37c>
80002df0:	0c 9c       	mov	r12,r6
80002df2:	10 91       	mov	r1,r8
80002df4:	e0 68 05 dc 	mov	r8,1500
80002df8:	0c 1c       	sub	r12,r6
80002dfa:	70 09       	ld.w	r9,r8[0x0]
80002dfc:	02 0c       	add	r12,r1
80002dfe:	89 26       	st.w	r4[0x8],r6
80002e00:	a1 ac       	sbr	r12,0x0
80002e02:	12 01       	add	r1,r9
80002e04:	8d 1c       	st.w	r6[0x4],r12
80002e06:	91 01       	st.w	r8[0x0],r1
80002e08:	08 33       	cp.w	r3,r4
80002e0a:	c1 c0       	breq	80002e42 <_malloc_r+0x3ca>
80002e0c:	58 f2       	cp.w	r2,15
80002e0e:	e0 8b 00 05 	brhi	80002e18 <_malloc_r+0x3a0>
80002e12:	30 18       	mov	r8,1
80002e14:	8d 18       	st.w	r6[0x4],r8
80002e16:	c2 78       	rjmp	80002e64 <_malloc_r+0x3ec>
80002e18:	30 59       	mov	r9,5
80002e1a:	20 c2       	sub	r2,12
80002e1c:	e0 12 ff f8 	andl	r2,0xfff8
80002e20:	e6 02 00 08 	add	r8,r3,r2
80002e24:	91 29       	st.w	r8[0x8],r9
80002e26:	91 19       	st.w	r8[0x4],r9
80002e28:	66 18       	ld.w	r8,r3[0x4]
80002e2a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002e2e:	e5 e8 10 08 	or	r8,r2,r8
80002e32:	87 18       	st.w	r3[0x4],r8
80002e34:	58 f2       	cp.w	r2,15
80002e36:	e0 88 00 06 	brls	80002e42 <_malloc_r+0x3ca>
80002e3a:	e6 cb ff f8 	sub	r11,r3,-8
80002e3e:	0a 9c       	mov	r12,r5
80002e40:	c8 8c       	rcall	80002f50 <_free_r>
80002e42:	e0 68 05 dc 	mov	r8,1500
80002e46:	e0 69 05 d4 	mov	r9,1492
80002e4a:	70 08       	ld.w	r8,r8[0x0]
80002e4c:	72 0a       	ld.w	r10,r9[0x0]
80002e4e:	14 38       	cp.w	r8,r10
80002e50:	e0 88 00 03 	brls	80002e56 <_malloc_r+0x3de>
80002e54:	93 08       	st.w	r9[0x0],r8
80002e56:	e0 69 05 d0 	mov	r9,1488
80002e5a:	72 0a       	ld.w	r10,r9[0x0]
80002e5c:	14 38       	cp.w	r8,r10
80002e5e:	e0 88 00 03 	brls	80002e64 <_malloc_r+0x3ec>
80002e62:	93 08       	st.w	r9[0x0],r8
80002e64:	68 28       	ld.w	r8,r4[0x8]
80002e66:	70 18       	ld.w	r8,r8[0x4]
80002e68:	e0 18 ff fc 	andl	r8,0xfffc
80002e6c:	0e 38       	cp.w	r8,r7
80002e6e:	5f 39       	srlo	r9
80002e70:	0e 18       	sub	r8,r7
80002e72:	58 f8       	cp.w	r8,15
80002e74:	5f aa       	srle	r10
80002e76:	f5 e9 10 09 	or	r9,r10,r9
80002e7a:	c0 50       	breq	80002e84 <_malloc_r+0x40c>
80002e7c:	0a 9c       	mov	r12,r5
80002e7e:	c1 2c       	rcall	80002ea2 <__malloc_unlock>
80002e80:	d8 3a       	popm	r0-r7,pc,r12=0
80002e82:	d7 03       	nop
80002e84:	68 26       	ld.w	r6,r4[0x8]
80002e86:	a1 a8       	sbr	r8,0x0
80002e88:	0e 99       	mov	r9,r7
80002e8a:	a1 a9       	sbr	r9,0x0
80002e8c:	8d 19       	st.w	r6[0x4],r9
80002e8e:	ec 07 00 07 	add	r7,r6,r7
80002e92:	0a 9c       	mov	r12,r5
80002e94:	89 27       	st.w	r4[0x8],r7
80002e96:	8f 18       	st.w	r7[0x4],r8
80002e98:	c0 5c       	rcall	80002ea2 <__malloc_unlock>
80002e9a:	ec cc ff f8 	sub	r12,r6,-8
80002e9e:	d8 32       	popm	r0-r7,pc

80002ea0 <__malloc_lock>:
80002ea0:	5e fc       	retal	r12

80002ea2 <__malloc_unlock>:
80002ea2:	5e fc       	retal	r12

80002ea4 <_sbrk_r>:
80002ea4:	d4 21       	pushm	r4-r7,lr
80002ea6:	30 08       	mov	r8,0
80002ea8:	18 97       	mov	r7,r12
80002eaa:	e0 66 06 04 	mov	r6,1540
80002eae:	16 9c       	mov	r12,r11
80002eb0:	8d 08       	st.w	r6[0x0],r8
80002eb2:	fe b0 fc fd 	rcall	800028ac <_sbrk>
80002eb6:	5b fc       	cp.w	r12,-1
80002eb8:	c0 51       	brne	80002ec2 <_sbrk_r+0x1e>
80002eba:	6c 08       	ld.w	r8,r6[0x0]
80002ebc:	58 08       	cp.w	r8,0
80002ebe:	c0 20       	breq	80002ec2 <_sbrk_r+0x1e>
80002ec0:	8f 38       	st.w	r7[0xc],r8
80002ec2:	d8 22       	popm	r4-r7,pc

80002ec4 <_malloc_trim_r>:
80002ec4:	d4 21       	pushm	r4-r7,lr
80002ec6:	16 95       	mov	r5,r11
80002ec8:	18 97       	mov	r7,r12
80002eca:	ce bf       	rcall	80002ea0 <__malloc_lock>
80002ecc:	e0 64 01 10 	mov	r4,272
80002ed0:	68 28       	ld.w	r8,r4[0x8]
80002ed2:	70 16       	ld.w	r6,r8[0x4]
80002ed4:	e0 16 ff fc 	andl	r6,0xfffc
80002ed8:	ec c8 ff 91 	sub	r8,r6,-111
80002edc:	f0 05 01 05 	sub	r5,r8,r5
80002ee0:	e0 15 ff 80 	andl	r5,0xff80
80002ee4:	ea c5 00 80 	sub	r5,r5,128
80002ee8:	e0 45 00 7f 	cp.w	r5,127
80002eec:	e0 8a 00 22 	brle	80002f30 <_malloc_trim_r+0x6c>
80002ef0:	30 0b       	mov	r11,0
80002ef2:	0e 9c       	mov	r12,r7
80002ef4:	cd 8f       	rcall	80002ea4 <_sbrk_r>
80002ef6:	68 28       	ld.w	r8,r4[0x8]
80002ef8:	0c 08       	add	r8,r6
80002efa:	10 3c       	cp.w	r12,r8
80002efc:	c1 a1       	brne	80002f30 <_malloc_trim_r+0x6c>
80002efe:	ea 0b 11 00 	rsub	r11,r5,0
80002f02:	0e 9c       	mov	r12,r7
80002f04:	cd 0f       	rcall	80002ea4 <_sbrk_r>
80002f06:	5b fc       	cp.w	r12,-1
80002f08:	c1 71       	brne	80002f36 <_malloc_trim_r+0x72>
80002f0a:	30 0b       	mov	r11,0
80002f0c:	0e 9c       	mov	r12,r7
80002f0e:	cc bf       	rcall	80002ea4 <_sbrk_r>
80002f10:	68 28       	ld.w	r8,r4[0x8]
80002f12:	f8 08 01 09 	sub	r9,r12,r8
80002f16:	58 f9       	cp.w	r9,15
80002f18:	e0 8a 00 0c 	brle	80002f30 <_malloc_trim_r+0x6c>
80002f1c:	a1 a9       	sbr	r9,0x0
80002f1e:	91 19       	st.w	r8[0x4],r9
80002f20:	e0 68 05 1c 	mov	r8,1308
80002f24:	70 09       	ld.w	r9,r8[0x0]
80002f26:	e0 68 05 dc 	mov	r8,1500
80002f2a:	f8 09 01 09 	sub	r9,r12,r9
80002f2e:	91 09       	st.w	r8[0x0],r9
80002f30:	0e 9c       	mov	r12,r7
80002f32:	cb 8f       	rcall	80002ea2 <__malloc_unlock>
80002f34:	d8 2a       	popm	r4-r7,pc,r12=0
80002f36:	68 28       	ld.w	r8,r4[0x8]
80002f38:	0a 16       	sub	r6,r5
80002f3a:	a1 a6       	sbr	r6,0x0
80002f3c:	91 16       	st.w	r8[0x4],r6
80002f3e:	e0 68 05 dc 	mov	r8,1500
80002f42:	70 09       	ld.w	r9,r8[0x0]
80002f44:	0a 19       	sub	r9,r5
80002f46:	0e 9c       	mov	r12,r7
80002f48:	91 09       	st.w	r8[0x0],r9
80002f4a:	ca cf       	rcall	80002ea2 <__malloc_unlock>
80002f4c:	da 2a       	popm	r4-r7,pc,r12=1
80002f4e:	d7 03       	nop

80002f50 <_free_r>:
80002f50:	d4 21       	pushm	r4-r7,lr
80002f52:	16 96       	mov	r6,r11
80002f54:	18 97       	mov	r7,r12
80002f56:	58 0b       	cp.w	r11,0
80002f58:	e0 80 00 bb 	breq	800030ce <_free_r+0x17e>
80002f5c:	ca 2f       	rcall	80002ea0 <__malloc_lock>
80002f5e:	20 86       	sub	r6,8
80002f60:	e0 6a 01 10 	mov	r10,272
80002f64:	6c 18       	ld.w	r8,r6[0x4]
80002f66:	74 2e       	ld.w	lr,r10[0x8]
80002f68:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80002f6c:	a1 c8       	cbr	r8,0x0
80002f6e:	ec 08 00 09 	add	r9,r6,r8
80002f72:	72 1b       	ld.w	r11,r9[0x4]
80002f74:	e0 1b ff fc 	andl	r11,0xfffc
80002f78:	1c 39       	cp.w	r9,lr
80002f7a:	c1 d1       	brne	80002fb4 <_free_r+0x64>
80002f7c:	f6 08 00 08 	add	r8,r11,r8
80002f80:	58 0c       	cp.w	r12,0
80002f82:	c0 81       	brne	80002f92 <_free_r+0x42>
80002f84:	6c 09       	ld.w	r9,r6[0x0]
80002f86:	12 16       	sub	r6,r9
80002f88:	12 08       	add	r8,r9
80002f8a:	6c 3b       	ld.w	r11,r6[0xc]
80002f8c:	6c 29       	ld.w	r9,r6[0x8]
80002f8e:	97 29       	st.w	r11[0x8],r9
80002f90:	93 3b       	st.w	r9[0xc],r11
80002f92:	10 99       	mov	r9,r8
80002f94:	95 26       	st.w	r10[0x8],r6
80002f96:	a1 a9       	sbr	r9,0x0
80002f98:	8d 19       	st.w	r6[0x4],r9
80002f9a:	e0 69 05 18 	mov	r9,1304
80002f9e:	72 09       	ld.w	r9,r9[0x0]
80002fa0:	12 38       	cp.w	r8,r9
80002fa2:	c0 63       	brcs	80002fae <_free_r+0x5e>
80002fa4:	e0 68 05 d8 	mov	r8,1496
80002fa8:	0e 9c       	mov	r12,r7
80002faa:	70 0b       	ld.w	r11,r8[0x0]
80002fac:	c8 cf       	rcall	80002ec4 <_malloc_trim_r>
80002fae:	0e 9c       	mov	r12,r7
80002fb0:	c7 9f       	rcall	80002ea2 <__malloc_unlock>
80002fb2:	d8 22       	popm	r4-r7,pc
80002fb4:	93 1b       	st.w	r9[0x4],r11
80002fb6:	58 0c       	cp.w	r12,0
80002fb8:	c0 30       	breq	80002fbe <_free_r+0x6e>
80002fba:	30 0c       	mov	r12,0
80002fbc:	c0 e8       	rjmp	80002fd8 <_free_r+0x88>
80002fbe:	6c 0e       	ld.w	lr,r6[0x0]
80002fc0:	f4 c5 ff f8 	sub	r5,r10,-8
80002fc4:	1c 08       	add	r8,lr
80002fc6:	1c 16       	sub	r6,lr
80002fc8:	6c 2e       	ld.w	lr,r6[0x8]
80002fca:	0a 3e       	cp.w	lr,r5
80002fcc:	c0 31       	brne	80002fd2 <_free_r+0x82>
80002fce:	30 1c       	mov	r12,1
80002fd0:	c0 48       	rjmp	80002fd8 <_free_r+0x88>
80002fd2:	6c 35       	ld.w	r5,r6[0xc]
80002fd4:	8b 2e       	st.w	r5[0x8],lr
80002fd6:	9d 35       	st.w	lr[0xc],r5
80002fd8:	f2 0b 00 0e 	add	lr,r9,r11
80002fdc:	7c 1e       	ld.w	lr,lr[0x4]
80002fde:	ed be 00 00 	bld	lr,0x0
80002fe2:	c1 40       	breq	8000300a <_free_r+0xba>
80002fe4:	16 08       	add	r8,r11
80002fe6:	58 0c       	cp.w	r12,0
80002fe8:	c0 d1       	brne	80003002 <_free_r+0xb2>
80002fea:	e0 6e 01 10 	mov	lr,272
80002fee:	72 2b       	ld.w	r11,r9[0x8]
80002ff0:	2f 8e       	sub	lr,-8
80002ff2:	1c 3b       	cp.w	r11,lr
80002ff4:	c0 71       	brne	80003002 <_free_r+0xb2>
80002ff6:	97 36       	st.w	r11[0xc],r6
80002ff8:	97 26       	st.w	r11[0x8],r6
80002ffa:	8d 2b       	st.w	r6[0x8],r11
80002ffc:	8d 3b       	st.w	r6[0xc],r11
80002ffe:	30 1c       	mov	r12,1
80003000:	c0 58       	rjmp	8000300a <_free_r+0xba>
80003002:	72 2b       	ld.w	r11,r9[0x8]
80003004:	72 39       	ld.w	r9,r9[0xc]
80003006:	93 2b       	st.w	r9[0x8],r11
80003008:	97 39       	st.w	r11[0xc],r9
8000300a:	10 99       	mov	r9,r8
8000300c:	ec 08 09 08 	st.w	r6[r8],r8
80003010:	a1 a9       	sbr	r9,0x0
80003012:	8d 19       	st.w	r6[0x4],r9
80003014:	58 0c       	cp.w	r12,0
80003016:	c5 a1       	brne	800030ca <_free_r+0x17a>
80003018:	e0 48 01 ff 	cp.w	r8,511
8000301c:	e0 8b 00 13 	brhi	80003042 <_free_r+0xf2>
80003020:	a3 98       	lsr	r8,0x3
80003022:	f4 08 00 39 	add	r9,r10,r8<<0x3
80003026:	72 2b       	ld.w	r11,r9[0x8]
80003028:	8d 39       	st.w	r6[0xc],r9
8000302a:	8d 2b       	st.w	r6[0x8],r11
8000302c:	97 36       	st.w	r11[0xc],r6
8000302e:	93 26       	st.w	r9[0x8],r6
80003030:	a3 48       	asr	r8,0x2
80003032:	74 19       	ld.w	r9,r10[0x4]
80003034:	30 1b       	mov	r11,1
80003036:	f6 08 09 48 	lsl	r8,r11,r8
8000303a:	f3 e8 10 08 	or	r8,r9,r8
8000303e:	95 18       	st.w	r10[0x4],r8
80003040:	c4 58       	rjmp	800030ca <_free_r+0x17a>
80003042:	f0 0b 16 09 	lsr	r11,r8,0x9
80003046:	58 4b       	cp.w	r11,4
80003048:	e0 8b 00 06 	brhi	80003054 <_free_r+0x104>
8000304c:	f0 0b 16 06 	lsr	r11,r8,0x6
80003050:	2c 8b       	sub	r11,-56
80003052:	c2 08       	rjmp	80003092 <_free_r+0x142>
80003054:	59 4b       	cp.w	r11,20
80003056:	e0 8b 00 04 	brhi	8000305e <_free_r+0x10e>
8000305a:	2a 5b       	sub	r11,-91
8000305c:	c1 b8       	rjmp	80003092 <_free_r+0x142>
8000305e:	e0 4b 00 54 	cp.w	r11,84
80003062:	e0 8b 00 06 	brhi	8000306e <_free_r+0x11e>
80003066:	f0 0b 16 0c 	lsr	r11,r8,0xc
8000306a:	29 2b       	sub	r11,-110
8000306c:	c1 38       	rjmp	80003092 <_free_r+0x142>
8000306e:	e0 4b 01 54 	cp.w	r11,340
80003072:	e0 8b 00 06 	brhi	8000307e <_free_r+0x12e>
80003076:	f0 0b 16 0f 	lsr	r11,r8,0xf
8000307a:	28 9b       	sub	r11,-119
8000307c:	c0 b8       	rjmp	80003092 <_free_r+0x142>
8000307e:	e0 4b 05 54 	cp.w	r11,1364
80003082:	e0 88 00 05 	brls	8000308c <_free_r+0x13c>
80003086:	37 eb       	mov	r11,126
80003088:	c0 58       	rjmp	80003092 <_free_r+0x142>
8000308a:	d7 03       	nop
8000308c:	f0 0b 16 12 	lsr	r11,r8,0x12
80003090:	28 4b       	sub	r11,-124
80003092:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80003096:	78 29       	ld.w	r9,r12[0x8]
80003098:	18 39       	cp.w	r9,r12
8000309a:	c0 e1       	brne	800030b6 <_free_r+0x166>
8000309c:	74 18       	ld.w	r8,r10[0x4]
8000309e:	a3 4b       	asr	r11,0x2
800030a0:	30 1c       	mov	r12,1
800030a2:	f8 0b 09 4b 	lsl	r11,r12,r11
800030a6:	f1 eb 10 0b 	or	r11,r8,r11
800030aa:	12 98       	mov	r8,r9
800030ac:	95 1b       	st.w	r10[0x4],r11
800030ae:	c0 a8       	rjmp	800030c2 <_free_r+0x172>
800030b0:	72 29       	ld.w	r9,r9[0x8]
800030b2:	18 39       	cp.w	r9,r12
800030b4:	c0 60       	breq	800030c0 <_free_r+0x170>
800030b6:	72 1a       	ld.w	r10,r9[0x4]
800030b8:	e0 1a ff fc 	andl	r10,0xfffc
800030bc:	14 38       	cp.w	r8,r10
800030be:	cf 93       	brcs	800030b0 <_free_r+0x160>
800030c0:	72 38       	ld.w	r8,r9[0xc]
800030c2:	8d 38       	st.w	r6[0xc],r8
800030c4:	8d 29       	st.w	r6[0x8],r9
800030c6:	93 36       	st.w	r9[0xc],r6
800030c8:	91 26       	st.w	r8[0x8],r6
800030ca:	0e 9c       	mov	r12,r7
800030cc:	ce be       	rcall	80002ea2 <__malloc_unlock>
800030ce:	d8 22       	popm	r4-r7,pc

800030d0 <__do_global_ctors_aux>:
800030d0:	d4 21       	pushm	r4-r7,lr
800030d2:	30 c7       	mov	r7,12
800030d4:	c0 28       	rjmp	800030d8 <__do_global_ctors_aux+0x8>
800030d6:	5d 18       	icall	r8
800030d8:	20 47       	sub	r7,4
800030da:	6e 08       	ld.w	r8,r7[0x0]
800030dc:	5b f8       	cp.w	r8,-1
800030de:	cf c1       	brne	800030d6 <__do_global_ctors_aux+0x6>
800030e0:	d8 22       	popm	r4-r7,pc
800030e2:	d7 03       	nop

Disassembly of section .exception:

80003200 <_evba>:
80003200:	c0 08       	rjmp	80003200 <_evba>
	...

80003204 <_handle_TLB_Multiple_Hit>:
80003204:	c0 08       	rjmp	80003204 <_handle_TLB_Multiple_Hit>
	...

80003208 <_handle_Bus_Error_Data_Fetch>:
80003208:	c0 08       	rjmp	80003208 <_handle_Bus_Error_Data_Fetch>
	...

8000320c <_handle_Bus_Error_Instruction_Fetch>:
8000320c:	c0 08       	rjmp	8000320c <_handle_Bus_Error_Instruction_Fetch>
	...

80003210 <_handle_NMI>:
80003210:	c0 08       	rjmp	80003210 <_handle_NMI>
	...

80003214 <_handle_Instruction_Address>:
80003214:	c0 08       	rjmp	80003214 <_handle_Instruction_Address>
	...

80003218 <_handle_ITLB_Protection>:
80003218:	c0 08       	rjmp	80003218 <_handle_ITLB_Protection>
	...

8000321c <_handle_Breakpoint>:
8000321c:	c0 08       	rjmp	8000321c <_handle_Breakpoint>
	...

80003220 <_handle_Illegal_Opcode>:
80003220:	c0 08       	rjmp	80003220 <_handle_Illegal_Opcode>
	...

80003224 <_handle_Unimplemented_Instruction>:
80003224:	c0 08       	rjmp	80003224 <_handle_Unimplemented_Instruction>
	...

80003228 <_handle_Privilege_Violation>:
80003228:	c0 08       	rjmp	80003228 <_handle_Privilege_Violation>
	...

8000322c <_handle_Floating_Point>:
8000322c:	c0 08       	rjmp	8000322c <_handle_Floating_Point>
	...

80003230 <_handle_Coprocessor_Absent>:
80003230:	c0 08       	rjmp	80003230 <_handle_Coprocessor_Absent>
	...

80003234 <_handle_Data_Address_Read>:
80003234:	c0 08       	rjmp	80003234 <_handle_Data_Address_Read>
	...

80003238 <_handle_Data_Address_Write>:
80003238:	c0 08       	rjmp	80003238 <_handle_Data_Address_Write>
	...

8000323c <_handle_DTLB_Protection_Read>:
8000323c:	c0 08       	rjmp	8000323c <_handle_DTLB_Protection_Read>
	...

80003240 <_handle_DTLB_Protection_Write>:
80003240:	c0 08       	rjmp	80003240 <_handle_DTLB_Protection_Write>
	...

80003244 <_handle_DTLB_Modified>:
80003244:	c0 08       	rjmp	80003244 <_handle_DTLB_Modified>
	...

80003250 <_handle_ITLB_Miss>:
80003250:	c0 08       	rjmp	80003250 <_handle_ITLB_Miss>
	...

80003260 <_handle_DTLB_Miss_Read>:
80003260:	c0 08       	rjmp	80003260 <_handle_DTLB_Miss_Read>
	...

80003270 <_handle_DTLB_Miss_Write>:
80003270:	c0 08       	rjmp	80003270 <_handle_DTLB_Miss_Write>
	...

80003300 <_handle_Supervisor_Call>:
80003300:	c0 08       	rjmp	80003300 <_handle_Supervisor_Call>
80003302:	d7 03       	nop

80003304 <_int0>:
80003304:	30 0c       	mov	r12,0
80003306:	fe b0 f8 a1 	rcall	80002448 <_get_interrupt_handler>
8000330a:	58 0c       	cp.w	r12,0
8000330c:	f8 0f 17 10 	movne	pc,r12
80003310:	d6 03       	rete

80003312 <_int1>:
80003312:	30 1c       	mov	r12,1
80003314:	fe b0 f8 9a 	rcall	80002448 <_get_interrupt_handler>
80003318:	58 0c       	cp.w	r12,0
8000331a:	f8 0f 17 10 	movne	pc,r12
8000331e:	d6 03       	rete

80003320 <_int2>:
80003320:	30 2c       	mov	r12,2
80003322:	fe b0 f8 93 	rcall	80002448 <_get_interrupt_handler>
80003326:	58 0c       	cp.w	r12,0
80003328:	f8 0f 17 10 	movne	pc,r12
8000332c:	d6 03       	rete

8000332e <_int3>:
8000332e:	30 3c       	mov	r12,3
80003330:	fe b0 f8 8c 	rcall	80002448 <_get_interrupt_handler>
80003334:	58 0c       	cp.w	r12,0
80003336:	f8 0f 17 10 	movne	pc,r12
8000333a:	d6 03       	rete
8000333c:	d7 03       	nop
8000333e:	d7 03       	nop
80003340:	d7 03       	nop
80003342:	d7 03       	nop
80003344:	d7 03       	nop
80003346:	d7 03       	nop
80003348:	d7 03       	nop
8000334a:	d7 03       	nop
8000334c:	d7 03       	nop
8000334e:	d7 03       	nop
80003350:	d7 03       	nop
80003352:	d7 03       	nop
80003354:	d7 03       	nop
80003356:	d7 03       	nop
80003358:	d7 03       	nop
8000335a:	d7 03       	nop
8000335c:	d7 03       	nop
8000335e:	d7 03       	nop
80003360:	d7 03       	nop
80003362:	d7 03       	nop
80003364:	d7 03       	nop
80003366:	d7 03       	nop
80003368:	d7 03       	nop
8000336a:	d7 03       	nop
8000336c:	d7 03       	nop
8000336e:	d7 03       	nop
80003370:	d7 03       	nop
80003372:	d7 03       	nop
80003374:	d7 03       	nop
80003376:	d7 03       	nop
80003378:	d7 03       	nop
8000337a:	d7 03       	nop
8000337c:	d7 03       	nop
8000337e:	d7 03       	nop
80003380:	d7 03       	nop
80003382:	d7 03       	nop
80003384:	d7 03       	nop
80003386:	d7 03       	nop
80003388:	d7 03       	nop
8000338a:	d7 03       	nop
8000338c:	d7 03       	nop
8000338e:	d7 03       	nop
80003390:	d7 03       	nop
80003392:	d7 03       	nop
80003394:	d7 03       	nop
80003396:	d7 03       	nop
80003398:	d7 03       	nop
8000339a:	d7 03       	nop
8000339c:	d7 03       	nop
8000339e:	d7 03       	nop
800033a0:	d7 03       	nop
800033a2:	d7 03       	nop
800033a4:	d7 03       	nop
800033a6:	d7 03       	nop
800033a8:	d7 03       	nop
800033aa:	d7 03       	nop
800033ac:	d7 03       	nop
800033ae:	d7 03       	nop
800033b0:	d7 03       	nop
800033b2:	d7 03       	nop
800033b4:	d7 03       	nop
800033b6:	d7 03       	nop
800033b8:	d7 03       	nop
800033ba:	d7 03       	nop
800033bc:	d7 03       	nop
800033be:	d7 03       	nop
800033c0:	d7 03       	nop
800033c2:	d7 03       	nop
800033c4:	d7 03       	nop
800033c6:	d7 03       	nop
800033c8:	d7 03       	nop
800033ca:	d7 03       	nop
800033cc:	d7 03       	nop
800033ce:	d7 03       	nop
800033d0:	d7 03       	nop
800033d2:	d7 03       	nop
800033d4:	d7 03       	nop
800033d6:	d7 03       	nop
800033d8:	d7 03       	nop
800033da:	d7 03       	nop
800033dc:	d7 03       	nop
800033de:	d7 03       	nop
800033e0:	d7 03       	nop
800033e2:	d7 03       	nop
800033e4:	d7 03       	nop
800033e6:	d7 03       	nop
800033e8:	d7 03       	nop
800033ea:	d7 03       	nop
800033ec:	d7 03       	nop
800033ee:	d7 03       	nop
800033f0:	d7 03       	nop
800033f2:	d7 03       	nop
800033f4:	d7 03       	nop
800033f6:	d7 03       	nop
800033f8:	d7 03       	nop
800033fa:	d7 03       	nop
800033fc:	d7 03       	nop
800033fe:	d7 03       	nop

Disassembly of section .fini:

80003400 <_fini>:
80003400:	eb cd 40 40 	pushm	r6,lr
80003404:	48 26       	lddpc	r6,8000340c <_fini+0xc>
80003406:	1e 26       	rsub	r6,pc
80003408:	c0 48       	rjmp	80003410 <_fini+0x10>
8000340a:	d7 03       	nop
8000340c:	80 00       	ld.sh	r0,r0[0x0]
8000340e:	33 ea       	mov	r10,62
80003410:	fe b0 f6 36 	rcall	8000207c <__do_global_dtors_aux>
80003414:	e3 cd 80 40 	ldm	sp++,r6,pc
